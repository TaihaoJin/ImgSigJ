/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Common_AnalysisForm.java
 *
 * Created on Jul 23, 2011, 10:44:01 AM
 */

package ImageAnalysis;
import utilities.CommonMethods;
import utilities.CommonStatisticsMethods;
import ij.WindowManager;
import ij.ImagePlus;
import java.util.ArrayList;
import java.awt.*;
import ImageAnalysis.LandscapeAnalyzerPixelSorting;
import utilities.CommonGuiMethods;
import ImageAnalysis.RegionBoundaryAnalyzer;
import ij.gui.Roi;
import utilities.Geometry.ImageShapes.ImageShape;
import utilities.Geometry.ImageShapes.ImageShapeHandler;
import ij.plugin.PlugIn;
import utilities.Non_LinearFitting.ImageFittingGUI;
import utilities.Gui.ImageComparisonViewer;
import utilities.Gui.RoiHighlighter;
import utilities.CustomDataTypes.intRange;
import utilities.CustomDataTypes.DoubleRange;
import FluoObjects.IPOGaussianFitter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import utilities.FittingResults_Analyzer;
import FluoObjects.IPOAnalyzerForm;
import FluoObjects.IPOGaussianNodeHandler;
import utilities.CommonImageMethods;
import utilities.Gui.AnalysisMasterForm;

/**
 *
 * @author Taihao
 */
public class Common_AnalysisForm extends javax.swing.JFrame implements ActionListener{

    /** Creates new form Common_AnalysisForm */
    AnalysisMasterForm m_cMasterForm;
    public void setMasterForm(AnalysisMasterForm cMasterForm){
        m_cMasterForm=cMasterForm;
    }
    public Common_AnalysisForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        GradientMapBT = new javax.swing.JButton();
        LandscapeBT = new javax.swing.JButton();
        LandscapeChoiceCB = new javax.swing.JComboBox();
        ComparisonBT = new javax.swing.JButton();
        ComplexBT = new javax.swing.JButton();
        ComplexThresholdTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        FittingGUIBT = new javax.swing.JButton();
        HighlightBT = new javax.swing.JButton();
        ClearHighlightBT = new javax.swing.JButton();
        InvertImageBT = new javax.swing.JButton();
        SecondOrderGradientMapBT = new javax.swing.JButton();
        ComboGradMapBT = new javax.swing.JButton();
        IPOGaussianFittingBT = new javax.swing.JButton();
        StatusLabel = new javax.swing.JLabel();
        RadialGradientMapBT = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        HeightRationCutoffTF = new javax.swing.JTextField();
        FittingAnalyzerBT = new javax.swing.JButton();
        SilentFittingRB = new javax.swing.JRadioButton();
        IPOAnalyzerBT = new javax.swing.JButton();
        SegmentImageBT = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        TF1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TF2 = new javax.swing.JTextField();
        MarkBackgroundBT = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Common Analysis Utilities");

        GradientMapBT.setText("Gradient Map");
        GradientMapBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GradientMapBTActionPerformed(evt);
            }
        });

        LandscapeBT.setText(" Landscape");
        LandscapeBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LandscapeBTActionPerformed(evt);
            }
        });

        LandscapeChoiceCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "all", "maxima", "minima", "watershed", "isolated minima", "combo maxima" }));

        ComparisonBT.setText("Comarison");
        ComparisonBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComparisonBTActionPerformed(evt);
            }
        });

        ComplexBT.setText("Complex");
        ComplexBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComplexBTActionPerformed(evt);
            }
        });

        ComplexThresholdTF.setText("0.01");

        jLabel1.setText("p");

        FittingGUIBT.setText("FittingGUI");
        FittingGUIBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FittingGUIBTActionPerformed(evt);
            }
        });

        HighlightBT.setText("highlight");
        HighlightBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HighlightBTActionPerformed(evt);
            }
        });

        ClearHighlightBT.setText("clear Highlight");
        ClearHighlightBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearHighlightBTActionPerformed(evt);
            }
        });

        InvertImageBT.setText("Invert Image");
        InvertImageBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvertImageBTActionPerformed(evt);
            }
        });

        SecondOrderGradientMapBT.setText("2-nd Grad Map");
        SecondOrderGradientMapBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SecondOrderGradientMapBTActionPerformed(evt);
            }
        });

        ComboGradMapBT.setText("Combo Grad Map");
        ComboGradMapBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboGradMapBTActionPerformed(evt);
            }
        });

        IPOGaussianFittingBT.setText("IPOGaussian Fitting");
        IPOGaussianFittingBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPOGaussianFittingBTActionPerformed(evt);
            }
        });

        StatusLabel.setText("Status:");

        RadialGradientMapBT.setText("Radial Grad Map");
        RadialGradientMapBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadialGradientMapBTActionPerformed(evt);
            }
        });

        jLabel2.setText("r");

        HeightRationCutoffTF.setText("0.3");

        FittingAnalyzerBT.setText("Fitting Analyzer");
        FittingAnalyzerBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FittingAnalyzerBTActionPerformed(evt);
            }
        });

        SilentFittingRB.setText("Silent Fitting");

        IPOAnalyzerBT.setText("IPO Analyzer");
        IPOAnalyzerBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPOAnalyzerBTActionPerformed(evt);
            }
        });

        SegmentImageBT.setText("Segment Image");
        SegmentImageBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SegmentImageBTActionPerformed(evt);
            }
        });

        jButton1.setText("Height Selection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TF1.setText("0.");

        jLabel3.setText("to");

        TF2.setText("0.05");

        MarkBackgroundBT.setText("Mark Background");
        MarkBackgroundBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarkBackgroundBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IPOGaussianFittingBT)
                            .addComponent(SilentFittingRB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IPOAnalyzerBT)
                            .addComponent(FittingAnalyzerBT)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(GradientMapBT)
                                    .addComponent(ComparisonBT)
                                    .addComponent(HighlightBT)
                                    .addComponent(FittingGUIBT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SecondOrderGradientMapBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ComboGradMapBT))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(ClearHighlightBT)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(InvertImageBT))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(ComplexBT)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(ComplexThresholdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(8, 8, 8)
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(HeightRationCutoffTF, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(LandscapeBT)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(LandscapeChoiceCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(11, 11, 11)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(StatusLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(RadialGradientMapBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SegmentImageBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MarkBackgroundBT)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GradientMapBT)
                    .addComponent(LandscapeBT)
                    .addComponent(LandscapeChoiceCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComparisonBT)
                    .addComponent(ComplexBT)
                    .addComponent(ComplexThresholdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(HeightRationCutoffTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HighlightBT)
                    .addComponent(InvertImageBT)
                    .addComponent(ClearHighlightBT))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FittingGUIBT)
                    .addComponent(SecondOrderGradientMapBT)
                    .addComponent(ComboGradMapBT))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RadialGradientMapBT)
                    .addComponent(SegmentImageBT)
                    .addComponent(MarkBackgroundBT))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(TF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(TF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FittingAnalyzerBT)
                    .addComponent(IPOGaussianFittingBT))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SilentFittingRB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(IPOAnalyzerBT)))
                .addGap(58, 58, 58)
                .addComponent(StatusLabel)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GradientMapBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GradientMapBTActionPerformed
        // TODO add your handling code here:
        showGradientMap();
    }//GEN-LAST:event_GradientMapBTActionPerformed

    private void LandscapeBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LandscapeBTActionPerformed
        // TODO add your handling code here:
        showLandscape();
    }//GEN-LAST:event_LandscapeBTActionPerformed

    private void ComplexBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComplexBTActionPerformed
        // TODO add your handling code here:
        double pValue=Double.parseDouble(ComplexThresholdTF.getText());
        double rCutoff=Double.parseDouble(ComplexThresholdTF.getText());
        showComplex(WindowManager.getCurrentImage(),pValue,rCutoff);

    }//GEN-LAST:event_ComplexBTActionPerformed

    private void FittingGUIBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FittingGUIBTActionPerformed
        // TODO add your handling code here:
        ImageFittingGUI.main(null);
    }//GEN-LAST:event_FittingGUIBTActionPerformed

    private void ComparisonBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComparisonBTActionPerformed
        // TODO add your handling code here:
        ImageComparisonViewer.main(null);
    }//GEN-LAST:event_ComparisonBTActionPerformed

    private void HighlightBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HighlightBTActionPerformed
        // TODO add your handling code here:
        RoiHighlighter.highLight();
    }//GEN-LAST:event_HighlightBTActionPerformed

    private void ClearHighlightBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearHighlightBTActionPerformed
        // TODO add your handling code here:
        RoiHighlighter.clearHighlighter();
    }//GEN-LAST:event_ClearHighlightBTActionPerformed

    private void InvertImageBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvertImageBTActionPerformed
        CommonMethods.invertImage(WindowManager.getCurrentImage());
    }//GEN-LAST:event_InvertImageBTActionPerformed

    private void SecondOrderGradientMapBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SecondOrderGradientMapBTActionPerformed
        // TODO add your handling code here:
        showSecondOrderGradientMap();
    }//GEN-LAST:event_SecondOrderGradientMapBTActionPerformed

    private void ComboGradMapBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboGradMapBTActionPerformed
        // TODO add your handling code here:
        showComboGradMap(WindowManager.getCurrentImage());
    }//GEN-LAST:event_ComboGradMapBTActionPerformed

    private void IPOGaussianFittingBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPOGaussianFittingBTActionPerformed
        // TODO add your handling code here:
        boolean silent=false;
        if(SilentFittingRB.isSelected()) silent=true;
        final IPOGaussianFitter fitter=new IPOGaussianFitter(silent);
        fitter.addFitterListener(this);
            Thread m_cFittingThread=new Thread(new Runnable() {
                public void run() {
                    fitter.fitImage(WindowManager.getCurrentImage());
                    displayIPOGaussianNodes(fitter);
                }
            });
            m_cFittingThread.start();            
    }//GEN-LAST:event_IPOGaussianFittingBTActionPerformed
    void displayIPOGaussianNodes(IPOGaussianFitter fitter){
        IPOGaussianNodeHandler handler=new IPOGaussianNodeHandler(fitter.getFittedRegionNodes(),fitter.getFittedComplexNodes(),0.1,fitter.getWidth(),fitter.getHeigh());
        IPOAnalyzerForm IPOA=new IPOAnalyzerForm(handler.getIPONodes());
    }
    private void RadialGradientMapBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadialGradientMapBTActionPerformed
        // TODO add your handling code here:
        showRadialGradientMap();
    }//GEN-LAST:event_RadialGradientMapBTActionPerformed

    private void FittingAnalyzerBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FittingAnalyzerBTActionPerformed
        // TODO add your handling code here:
        FittingResults_Analyzer cAnalyzer=new FittingResults_Analyzer();
        cAnalyzer.run(null);
    }//GEN-LAST:event_FittingAnalyzerBTActionPerformed

    private void IPOAnalyzerBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPOAnalyzerBTActionPerformed
        // TODO add your handling code here:
        IPOAnalyzerForm.main(null);
    }//GEN-LAST:event_IPOAnalyzerBTActionPerformed

    private void SegmentImageBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SegmentImageBTActionPerformed
        // TODO add your handling code here:
        ImagePlus impl=CommonMethods.getCurrentImage();
        ImageSegmentor segmentor=new ImageSegmentor(impl);
    }//GEN-LAST:event_SegmentImageBTActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        showHeightSelection();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MarkBackgroundBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarkBackgroundBTActionPerformed
        // TODO add your handling code here:
        CommonImageMethods.markBackground(CommonMethods.getCurrentImage());
    }//GEN-LAST:event_MarkBackgroundBTActionPerformed
    void showHeightSelection(){
        double p1=Double.parseDouble(TF1.getText()),p2=Double.parseDouble(TF2.getText());
        ImagePlus impl=CommonMethods.getCurrentImage();
        CommonMethods.showHeightSelection(impl,p1,p2);
    }
    void showComboGradMap(ImagePlus impl){
        int[][] pixels=CommonMethods.getPixelValues(impl);
        int w=pixels[0].length,h=pixels.length,i,j;
        int[][]pixelsgd=new int[h][w],pixelsgd2=new int[h][w],pixelsgdc=new int[h][w];
        ImagePlus implc=CommonMethods.getBlankImage(ImagePlus.GRAY32, w, h);
        CommonMethods.getGradientMap(pixels, pixelsgd);
        CommonMethods.getSecondOrderGradientMap(pixels, pixelsgd2);
        intRange ir=CommonStatisticsMethods.getRange(pixelsgd);
        double[][] pdPixelsc=new double[h][w];
        double pixel;
        int it;
        DoubleRange ir1=new DoubleRange();
        int sign=1;

        for(i=0;i<h;i++){
            for(j=0;j<w;j++){
                it=pixelsgd[i][j];
                sign=1;
                if(pixelsgd2[i][j]<0) sign=-1;
                if(it==0) it=1;
                pixel=sign*(ir.getMax()/it);
                pdPixelsc[i][j]=pixel;
                ir1.expandRange(pixel);
            }
        }
        for(i=0;i<h;i++){
            for(j=0;j<w;j++){
                pixelsgdc[i][j]=(int)(pdPixelsc[i][j]-ir1.getMin());
            }
        }
        implc.setTitle("combined gradient map of "+impl.getTitle());
        CommonMethods.setPixels(implc, pixelsgdc);
        implc.show();
    }

    void showComboGradMap0(ImagePlus impl){
        int[][] pixels=CommonMethods.getPixelValues(impl);
        int w=pixels[0].length,h=pixels.length,i,j;
        int[][]pixelsgd=new int[h][w],pixelsgd2=new int[h][w],pixelsgdc=new int[h][w];
        ImagePlus implc=CommonMethods.getBlankImage(ImagePlus.GRAY32, w, h);
        CommonMethods.getGradientMap(pixels, pixelsgd);
        CommonMethods.getSecondOrderGradientMap(pixels, pixelsgd2);
        intRange ir=CommonStatisticsMethods.getRange(pixelsgd);
        double[][] pdPixelsc=new double[h][w];
        double pixel;
        int it;
        DoubleRange ir1=new DoubleRange();
        for(i=0;i<h;i++){
            for(j=0;j<w;j++){
                it=pixelsgd[i][j];
                if(it==0) it=1;
                pixel=pixelsgd2[i][j]*(ir.getMax()/it);
                pdPixelsc[i][j]=pixel;
                ir1.expandRange(pixel);
            }
        }
        for(i=0;i<h;i++){
            for(j=0;j<w;j++){
                pixelsgdc[i][j]=(int)(pdPixelsc[i][j]-ir1.getMin());
            }
        }
        implc.setTitle("combined gradient map of "+impl.getTitle());
        CommonMethods.setPixels(implc, pixelsgdc);
        implc.show();
    }

    void showComplex(ImagePlus impl,double pValue, double rCutoff){//did not implement rCutoff yet
        RegionBoundaryAnalyzer cRBA=CommonMethods.buildRegionComplex(impl,pValue);
        ArrayList<RegionComplexNode> cvComplexes=cRBA.m_cvComplexNodes;
        int len=cvComplexes.size(),i;
        ArrayList<Roi> cvROIs=new ArrayList();
        ImageShape cIS;
        for(i=0;i<len;i++){
            cIS=cRBA.getRegionComplexShape(cvComplexes.get(i));
            cvROIs.add(ImageShapeHandler.getRoi(cIS));
        }
        RoiHighlighter.addRoi(impl, cvROIs);
        RoiHighlighter.highLight();
    }
    void showLandscape(){
        ImagePlus impl=WindowManager.getCurrentImage();
        String sType=(String)LandscapeChoiceCB.getSelectedItem();
        ArrayList<Point> points;
 //       if(sType.contentEquals("all")||sType.contentEquals("watershed")){
        Roi roi=impl.getRoi();
        int w=impl.getWidth(),h=impl.getHeight();
        int iI=0,iF=h-1,jI=0,jF=w-1;
        if(roi!=null){
            Rectangle rect=roi.getBoundingRect();
            iI=rect.y;
            jI=rect.x;
            iF=iI+rect.height-1;
            jF=jI+rect.width-1;
        }
        if(sType.contentEquals("all")){
            CommonMethods.showLandscapeAndComplex(impl, false, false,Double.parseDouble(ComplexThresholdTF.getText()),true,iI,iF,jI,jF);
        }
        if(sType.contentEquals("maxima")){
            points=CommonMethods.getSpecialLandscapePoints(impl, LandscapeAnalyzerPixelSorting.localMaximum);
            CommonGuiMethods.highlightPoints(impl, points, Color.blue);
        }
        if(sType.contentEquals("minima")){
            points=CommonMethods.getSpecialLandscapePoints(impl, LandscapeAnalyzerPixelSorting.localMinimum);
            CommonGuiMethods.highlightPoints(impl, points, Color.red);
        }
        if(sType.contentEquals("watershed")){
            points=CommonMethods.getSpecialLandscapePoints(impl, LandscapeAnalyzerPixelSorting.watershed);
            CommonGuiMethods.highlightPoints(impl, points, Color.red);
        }
        if(sType.contentEquals("isolated minima")){
            points=CommonMethods.getSpecialLandscapePoints(impl, LandscapeAnalyzerPixelSorting.localMinimum);
            CommonGuiMethods.highlightPoints(impl, points, Color.red);
        }
        if(sType.contentEquals("combo maxima")){
            points=CommonMethods.getComboMaxima(impl);
            CommonGuiMethods.highlightPoints(impl, points, Color.red);
        }
    }
    void showSecondOrderGradientMap(){
        ImagePlus impl=WindowManager.getCurrentImage();
        int w=impl.getWidth(),h=impl.getHeight();
        int[][] pixels=new int[h][w],pixelsgd=new int[h][w];
        CommonMethods.getPixelValue(impl, impl.getCurrentSlice(), pixels);
        CommonMethods.getSecondOrderGradientMap(pixels, pixelsgd);
        CommonMethods.displayAsImage("2-nd order gradient Map of "+impl.getTitle(), w, h, pixelsgd,ImagePlus.GRAY32);
    }
    void showRadialGradientMap(){
        ImagePlus impl=WindowManager.getCurrentImage();
        int w=impl.getWidth(),h=impl.getHeight();
        int[][] pixels=new int[h][w],pixelsgd=new int[h][w];
        CommonMethods.getPixelValue(impl, impl.getCurrentSlice(), pixels);
        CommonMethods.getRadialGradientMap(pixels, pixelsgd);
        CommonMethods.displayAsImage("Radial gradient Map of "+impl.getTitle(), w, h, pixelsgd,ImagePlus.GRAY32);
    }
    void showGradientMap(){
        ImagePlus impl=WindowManager.getCurrentImage();
        int w=impl.getWidth(),h=impl.getHeight();
        int[][] pixels=new int[h][w],pixelsgd=new int[h][w];
        CommonMethods.getPixelValue(impl, impl.getCurrentSlice(), pixels);
        CommonMethods.getGradientMap(pixels, pixelsgd);
        CommonMethods.displayAsImage("gradientMap of "+impl.getTitle(), w, h, pixelsgd,ImagePlus.GRAY32);
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Common_AnalysisForm().setVisible(true);
            }
        });
    }
    public void actionPerformed(ActionEvent ae){
        String st=ae.getActionCommand();
        if(st.startsWith("Status:")){
            StatusLabel.setText(st);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearHighlightBT;
    private javax.swing.JButton ComboGradMapBT;
    private javax.swing.JButton ComparisonBT;
    private javax.swing.JButton ComplexBT;
    private javax.swing.JTextField ComplexThresholdTF;
    private javax.swing.JButton FittingAnalyzerBT;
    private javax.swing.JButton FittingGUIBT;
    private javax.swing.JButton GradientMapBT;
    private javax.swing.JTextField HeightRationCutoffTF;
    private javax.swing.JButton HighlightBT;
    private javax.swing.JButton IPOAnalyzerBT;
    private javax.swing.JButton IPOGaussianFittingBT;
    private javax.swing.JButton InvertImageBT;
    private javax.swing.JButton LandscapeBT;
    private javax.swing.JComboBox LandscapeChoiceCB;
    private javax.swing.JButton MarkBackgroundBT;
    private javax.swing.JButton RadialGradientMapBT;
    private javax.swing.JButton SecondOrderGradientMapBT;
    private javax.swing.JButton SegmentImageBT;
    private javax.swing.JRadioButton SilentFittingRB;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JTextField TF1;
    private javax.swing.JTextField TF2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
