/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package utilities.Gui;
import ij.IJ;
import ij.ImagePlus;
import ij.gui.PlotWindow;
import ij.gui.Roi;
import java.awt.Color;
import java.awt.Frame;
import utilities.CommonMethods;
import utilities.CommonGuiMethods;
import java.util.ArrayList;
import utilities.CommonStatisticsMethods;
import utilities.io.PrintAssist;
import utilities.statistics.Histogram;
import utilities.statistics.MeanSem1;
import utilities.CustomDataTypes.DoubleRange;
import utilities.CustomDataTypes.intRange;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JLabel;
import utilities.statistics.LineFeatureExtracter2;
import utilities.CustomDataTypes.IntPair;
import utilities.CustomDataTypes.DoublePair;
import utilities.statistics.GaussianDistribution;
import utilities.Gui.PlotHandlerGui;

/**
 *
 * @author Taihao
 */
public class PlotHandlerGui extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form PlotHandlerGui
     */
    
    static PlotWindowPlus m_cCurrentPlot;
    public static ArrayList<PlotWindowPlus> cvPlotWindows;
    boolean initializing;
    public PlotHandlerGui() {
        if(cvPlotWindows==null) cvPlotWindows=new ArrayList();
        initComponents();
        additionalInit();
        initializing=false;
        CommonGuiMethods.makeClipboardCopiable(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ZoomInBT = new javax.swing.JButton();
        ZoomOutBT = new javax.swing.JButton();
        ResetViewBT = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        PlotOptionCB = new javax.swing.JComboBox();
        AnalysisBT = new javax.swing.JButton();
        SelectCurveBT = new javax.swing.JButton();
        DuplicateBT = new javax.swing.JButton();
        ClosePlotBT = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        XiTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        XfTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        YiTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        YfTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        XcTF = new javax.swing.JTextField();
        YcTF = new javax.swing.JTextField();
        AutoYScaleRB = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        XWidthTF = new javax.swing.JTextField();
        YWidthTF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        PlotWindowsCB = new javax.swing.JComboBox();
        CursorStatusLB = new javax.swing.JLabel();
        CloseAllBT = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        FeatureOptionCB = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        ColorOptionCB = new javax.swing.JComboBox();
        PickRegionRB = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        LeftTF = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        RightTF = new javax.swing.JTextField();
        RemoveFeatureLineBT = new javax.swing.JButton();
        WindowSizeCB = new javax.swing.JComboBox();
        ShowSegmentsRB = new javax.swing.JRadioButton();
        CurveListCB = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        HighlightCurveRB = new javax.swing.JRadioButton();
        RemoveCurveBT = new javax.swing.JButton();
        CurveStatisticsSP = new javax.swing.JScrollPane();
        SumaryTitleLB = new javax.swing.JLabel();
        ShowCurveStatisticsBT = new javax.swing.JButton();
        MarkOutLiarsCB = new javax.swing.JCheckBox();
        PValueTF = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        pOutlierTF = new javax.swing.JLabel();
        POutlierTF = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        OutlierTailOptionCB = new javax.swing.JComboBox();
        PlotShapeCB = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        PlotWidthTF = new javax.swing.JTextField();
        CloseAllTempImageBT = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        GraphTitleBT = new javax.swing.JButton();
        YAxisTitle = new javax.swing.JButton();
        XAxisTitle = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PlotWindowPlus Handler");

        ZoomInBT.setText("Zoom In");
        ZoomInBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomInBTActionPerformed(evt);
            }
        });

        ZoomOutBT.setText("Zoom Out");
        ZoomOutBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomOutBTActionPerformed(evt);
            }
        });

        ResetViewBT.setText("Reset");
        ResetViewBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetViewBTActionPerformed(evt);
            }
        });

        jLabel1.setText("show");

        PlotOptionCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "delta plot", "histogram", "extrema plot", "local maxima", "local minima", "stable transitions", "extrema intervals", "full transition amps", "gradient plot", "2nd gradient", "median fitering", "extrema normalization" }));
        PlotOptionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotOptionCBActionPerformed(evt);
            }
        });

        AnalysisBT.setText("Analysis Tools");
        AnalysisBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalysisBTActionPerformed(evt);
            }
        });

        SelectCurveBT.setText("Select Curve");
        SelectCurveBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectCurveBTActionPerformed(evt);
            }
        });

        DuplicateBT.setText("duplicate");
        DuplicateBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuplicateBTActionPerformed(evt);
            }
        });

        ClosePlotBT.setText("close");
        ClosePlotBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosePlotBTActionPerformed(evt);
            }
        });

        jLabel2.setText("X Scale");

        XiTF.setText("0");
        XiTF.setMinimumSize(new java.awt.Dimension(600, 20));
        XiTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XiTFActionPerformed(evt);
            }
        });

        jLabel3.setText("to");

        XfTF.setText("1000");
        XfTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XfTFActionPerformed(evt);
            }
        });

        jLabel4.setText("Y Scale");

        YiTF.setText("0");
        YiTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YiTFActionPerformed(evt);
            }
        });

        jLabel5.setText("to");

        YfTF.setText("1000");
        YfTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YfTFActionPerformed(evt);
            }
        });

        jLabel6.setText("Center");

        jLabel7.setText("X");

        jLabel8.setText("Y");

        XcTF.setText("1000");
        XcTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XcTFActionPerformed(evt);
            }
        });

        YcTF.setText("1000");
        YcTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YcTFActionPerformed(evt);
            }
        });

        AutoYScaleRB.setText("Auto Y Scale");
        AutoYScaleRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoYScaleRBActionPerformed(evt);
            }
        });

        jLabel9.setText("width");

        XWidthTF.setText("1000");
        XWidthTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XWidthTFActionPerformed(evt);
            }
        });

        YWidthTF.setText("1000");
        YWidthTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YWidthTFActionPerformed(evt);
            }
        });

        jLabel10.setText("Plot Windows");

        PlotWindowsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotWindowsCBActionPerformed(evt);
            }
        });

        CursorStatusLB.setText("Cursor(s)");

        CloseAllBT.setText("Close All");
        CloseAllBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseAllBTActionPerformed(evt);
            }
        });

        jLabel11.setText("Feature Line");

        FeatureOptionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeatureOptionCBActionPerformed(evt);
            }
        });

        jLabel12.setText("Color");

        PickRegionRB.setText("Pick Region");
        PickRegionRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickRegionRBActionPerformed(evt);
            }
        });

        jLabel13.setText("Left");

        LeftTF.setText("4");

        jLabel14.setText("Right");

        RightTF.setText("6");

        RemoveFeatureLineBT.setText("Remove");
        RemoveFeatureLineBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveFeatureLineBTActionPerformed(evt);
            }
        });

        WindowSizeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowSizeCBActionPerformed(evt);
            }
        });

        ShowSegmentsRB.setText("Show segments");
        ShowSegmentsRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowSegmentsRBActionPerformed(evt);
            }
        });

        CurveListCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurveListCBActionPerformed(evt);
            }
        });

        jLabel15.setText("Curves");

        HighlightCurveRB.setText("Highlight");
        HighlightCurveRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HighlightCurveRBActionPerformed(evt);
            }
        });

        RemoveCurveBT.setText("Remove Curve");
        RemoveCurveBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveCurveBTActionPerformed(evt);
            }
        });

        SumaryTitleLB.setText("Curve Name");

        ShowCurveStatisticsBT.setText("Show Stat.");
        ShowCurveStatisticsBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCurveStatisticsBTActionPerformed(evt);
            }
        });

        MarkOutLiarsCB.setText("Mark Outliars");
        MarkOutLiarsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarkOutLiarsCBActionPerformed(evt);
            }
        });

        PValueTF.setText("0.05");

        jLabel16.setText("p Value");

        pOutlierTF.setText("pOutlier");

        POutlierTF.setText("0.001");
        POutlierTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                POutlierTFActionPerformed(evt);
            }
        });

        jLabel17.setText("Tails");

        OutlierTailOptionCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Large", "Small", "Two sides" }));

        PlotShapeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Line", "Cross", "X", "Box", "Dot", "Circle", "Triangle", " " }));

        jLabel18.setText("Plot Shape");

        jLabel19.setText("Plot Width");

        PlotWidthTF.setText("1");

        CloseAllTempImageBT.setText("Close All Temp Images");
        CloseAllTempImageBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseAllTempImageBTActionPerformed(evt);
            }
        });

        GraphTitleBT.setText("Graph Title");
        GraphTitleBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraphTitleBTActionPerformed(evt);
            }
        });

        YAxisTitle.setText("Y Axis Title");
        YAxisTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YAxisTitleActionPerformed(evt);
            }
        });

        XAxisTitle.setText("X Axis Title");
        XAxisTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XAxisTitleActionPerformed(evt);
            }
        });

        jButton1.setText("Copy Plot");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ZoomInBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ZoomOutBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ResetViewBT)
                                .addGap(18, 18, 18)
                                .addComponent(AnalysisBT)
                                .addGap(27, 27, 27)
                                .addComponent(SumaryTitleLB))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(XiTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(YiTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(XWidthTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(YfTF, javax.swing.GroupLayout.DEFAULT_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(XfTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(YWidthTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CurveStatisticsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(GraphTitleBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(XAxisTitle)
                                        .addGap(5, 5, 5)
                                        .addComponent(YAxisTitle)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)))))
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PlotOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DuplicateBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClosePlotBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CloseAllTempImageBT))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SelectCurveBT)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10))
                                    .addComponent(RemoveCurveBT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ShowCurveStatisticsBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(MarkOutLiarsCB)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PValueTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pOutlierTF)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(POutlierTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(OutlierTailOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PlotWindowsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(CloseAllBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel15)
                                        .addGap(3, 3, 3)
                                        .addComponent(CurveListCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(HighlightCurveRB))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PickRegionRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LeftTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RightTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(FeatureOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(WindowSizeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(ColorOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ShowSegmentsRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RemoveFeatureLineBT))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(PlotShapeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlotWidthTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(XcTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(YcTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(AutoYScaleRB))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(CursorStatusLB)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ZoomInBT)
                    .addComponent(ZoomOutBT)
                    .addComponent(ResetViewBT)
                    .addComponent(AnalysisBT)
                    .addComponent(SumaryTitleLB))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(XfTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(YfTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addComponent(XWidthTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(YWidthTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CurveStatisticsSP, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(GraphTitleBT)
                                    .addComponent(YAxisTitle)
                                    .addComponent(XAxisTitle)
                                    .addComponent(jButton1))))
                        .addGap(31, 31, 31)
                        .addComponent(jLabel22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(XiTF, javax.swing.GroupLayout.DEFAULT_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(YiTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(XcTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(YcTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel6))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AutoYScaleRB)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(PlotOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DuplicateBT)
                    .addComponent(ClosePlotBT)
                    .addComponent(CloseAllTempImageBT))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectCurveBT)
                    .addComponent(jLabel10)
                    .addComponent(PlotWindowsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CloseAllBT)
                    .addComponent(CurveListCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(HighlightCurveRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveCurveBT)
                    .addComponent(ShowCurveStatisticsBT)
                    .addComponent(MarkOutLiarsCB)
                    .addComponent(PValueTF, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(pOutlierTF)
                    .addComponent(POutlierTF, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(OutlierTailOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(FeatureOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(ColorOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RemoveFeatureLineBT)
                    .addComponent(WindowSizeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ShowSegmentsRB))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PickRegionRB)
                    .addComponent(jLabel13)
                    .addComponent(LeftTF, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(RightTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PlotShapeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(PlotWidthTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CursorStatusLB)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ZoomInBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomInBTActionPerformed
        // TODO add your handling code here:
        zoomIn();
    }//GEN-LAST:event_ZoomInBTActionPerformed

    private void ZoomOutBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomOutBTActionPerformed
        // TODO add your handling code here:
        zoomOut();
    }//GEN-LAST:event_ZoomOutBTActionPerformed

    private void ResetViewBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetViewBTActionPerformed
        // TODO add your handling code here:
        resetZoom();
    }//GEN-LAST:event_ResetViewBTActionPerformed

    private void AnalysisBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalysisBTActionPerformed
        // TODO add your handling code here:
        AnalysisMasterForm.main(null);
    }//GEN-LAST:event_AnalysisBTActionPerformed

    private void PlotOptionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlotOptionCBActionPerformed
        // TODO add your handling code here:
        String option=(String) PlotOptionCB.getSelectedItem();
        if(option.contains("delta plot")) showDeltaPlot();
        if(option.contentEquals("extrema plot")) showExtremaPlot();
        if(option.contentEquals("local minima")) showLocalMinima();
        if(option.contentEquals("local maxima")) showLocalMaxima();
        if(option.contentEquals("histogram")) showHistogram();
        if(option.contentEquals("stable transitions")) showStableTransitions1();
        if(option.contentEquals("extrema intervals")) showExtremaIntervals();
        if(option.contentEquals("full transition amps")) showFullTransitionAmps();
        if(option.contentEquals("gradient plot")) showGradientPlot();
        if(option.contentEquals("extrema normalization")) this.showLocalExtremaNormalization();
        if(option.contentEquals("2nd gradient")) this.show2EndGradientPlot();
        if(option.contentEquals("median fitering")) this.showRWMedianFiltering();
    }//GEN-LAST:event_PlotOptionCBActionPerformed

    private void SelectCurveBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectCurveBTActionPerformed
        // TODO add your handling code here:
//        updateCurrentPlot();
        m_cCurrentPlot.selectActiveCurve();
    }//GEN-LAST:event_SelectCurveBTActionPerformed

    private void DuplicateBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuplicateBTActionPerformed
        // TODO add your handling code here:
//        updateCurrentPlot();
        PlotWindowPlus pw=m_cCurrentPlot.copy();
    }//GEN-LAST:event_DuplicateBTActionPerformed

    private void ClosePlotBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosePlotBTActionPerformed
        // TODO add your handling code here:
//        updateCurrentPlot();
        m_cCurrentPlot.close();
    }//GEN-LAST:event_ClosePlotBTActionPerformed

    private void XiTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XiTFActionPerformed
        // TODO add your handling code here:
        rescalePlot();
    }//GEN-LAST:event_XiTFActionPerformed

    private void XfTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XfTFActionPerformed
        // TODO add your handling code here:
        rescalePlot();
    }//GEN-LAST:event_XfTFActionPerformed

    private void YiTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YiTFActionPerformed
        // TODO add your handling code here:
        rescalePlot();
    }//GEN-LAST:event_YiTFActionPerformed

    private void YfTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YfTFActionPerformed
        // TODO add your handling code here:
        rescalePlot();
    }//GEN-LAST:event_YfTFActionPerformed

    private void XcTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XcTFActionPerformed
        // TODO add your handling code here:
//        updateCurrentPlot();
        setXYScales_CW();

    }//GEN-LAST:event_XcTFActionPerformed
    void setXYScales_CW(){
        double xc=Double.parseDouble(XcTF.getText()),xw=Double.parseDouble(XWidthTF.getText());
        XiTF.setText(m_cCurrentPlot.getXString(xc-0.5*xw));
        XfTF.setText(m_cCurrentPlot.getXString(xc+0.5*xw));
        rescalePlot();
    }
    private void YcTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YcTFActionPerformed
        // TODO add your handling code here:
//        updateCurrentPlot();
        setXYScales_CW();
    }//GEN-LAST:event_YcTFActionPerformed

    private void AutoYScaleRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoYScaleRBActionPerformed
        // TODO add your handling code here:
//        updateCurrentPlot();
        m_cCurrentPlot.autoYScale(AutoYScaleRB.isSelected());
    }//GEN-LAST:event_AutoYScaleRBActionPerformed
    
    private void YWidthTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YWidthTFActionPerformed
        // TODO add your handling code here:
        setXYScales_CW();
    }//GEN-LAST:event_YWidthTFActionPerformed

    private void XWidthTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XWidthTFActionPerformed
        // TODO add your handling code here:
        setXYScales_CW();
    }//GEN-LAST:event_XWidthTFActionPerformed

    private void PlotWindowsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlotWindowsCBActionPerformed
        // TODO add your handling code here:
        Object o=PlotWindowsCB.getSelectedItem();
        if(o!=null){
            if(o instanceof PlotWindowPlus){
                setAsCurrentPlotWindow((PlotWindowPlus)o);
                m_cCurrentPlot.toFront();
            }
        }        
    }//GEN-LAST:event_PlotWindowsCBActionPerformed

    private void CloseAllBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseAllBTActionPerformed
        // TODO add your handling code here:
        closeAllPlotWindowPlus();
    }//GEN-LAST:event_CloseAllBTActionPerformed

    private void FeatureOptionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeatureOptionCBActionPerformed
        // TODO add your handling code here:
        String name=(String) FeatureOptionCB.getSelectedItem(); 
        ArrayList<String> svWs=new ArrayList();
        renewWindowSizeChoices(name,svWs);
        if(!svWs.isEmpty()){
            String ws;
            int i,nSize=svWs.size();
            Color c;
            for(i=0;i<nSize;i++){
                ws=svWs.get(i);
                if(i<nSize-1)
                    c=CommonGuiMethods.getDefaultColor(i+1);
                else
                    c=Color.ORANGE;
                plotFeatureLine(name,ws,c);
                if(name.contentEquals("Envelope thickness")) break;
            }
        }
    }//GEN-LAST:event_FeatureOptionCBActionPerformed

    private void PickRegionRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickRegionRBActionPerformed
        // TODO add your handling code here:
        if(pickingXRange()) m_cCurrentPlot.pickXRange();
    }//GEN-LAST:event_PickRegionRBActionPerformed

    private void RemoveFeatureLineBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveFeatureLineBTActionPerformed
        // TODO add your handling code here:
        removeFeatureLines();
    }//GEN-LAST:event_RemoveFeatureLineBTActionPerformed

    private void WindowSizeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowSizeCBActionPerformed
        // TODO add your handling code here:
        if(!initializing) plotFeatureLine();
    }//GEN-LAST:event_WindowSizeCBActionPerformed

    private void HighlightCurveRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HighlightCurveRBActionPerformed
        // TODO add your handling code here:
        if(HighlightCurveRB.isSelected()) {
            if(m_cCurrentPlot!=null) m_cCurrentPlot.hightlightActiveCurve();
        }else{            
            if(m_cCurrentPlot!=null){
                int index=m_cCurrentPlot.getActiveCurveIndex();
                m_cCurrentPlot.selectActiveCurve(-1);
                m_cCurrentPlot.hightlightActiveCurve();
                m_cCurrentPlot.selectActiveCurve(index);
            }
        }
    }//GEN-LAST:event_HighlightCurveRBActionPerformed
    public int setActiveCurveHighlightOption(boolean hilight){
        HighlightCurveRB.setSelected(hilight);
        return 1;
    }
    private void CurveListCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurveListCBActionPerformed
        // TODO add your handling code here:
        int index=CurveListCB.getSelectedIndex();
        
        if(m_cCurrentPlot!=null) m_cCurrentPlot.selectActiveCurve(index);
    }//GEN-LAST:event_CurveListCBActionPerformed
    public void updateCurveListCBSelection(String item){
        CommonGuiMethods.setSelectedItem(this, CurveListCB, item);
    }
    private void RemoveCurveBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveCurveBTActionPerformed
        // TODO add your handling code here:
        if(m_cCurrentPlot!=null){
            int index=CurveListCB.getSelectedIndex();
            m_cCurrentPlot.removeCurve(index);
        }
    }//GEN-LAST:event_RemoveCurveBTActionPerformed

    private void ShowSegmentsRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowSegmentsRBActionPerformed
        // TODO add your handling code here:
        removeFeatureLines();
        FeatureOptionCBActionPerformed(null);
    }//GEN-LAST:event_ShowSegmentsRBActionPerformed

    private void ShowCurveStatisticsBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCurveStatisticsBTActionPerformed
        // TODO add your handling code here:
        showCurveStatistics();
    }//GEN-LAST:event_ShowCurveStatisticsBTActionPerformed

    private void MarkOutLiarsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarkOutLiarsCBActionPerformed
        // TODO add your handling code here:
        clearMarkedOutliers();
    }//GEN-LAST:event_MarkOutLiarsCBActionPerformed

    private void POutlierTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_POutlierTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_POutlierTFActionPerformed

    private void CloseAllTempImageBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseAllTempImageBTActionPerformed
        // TODO add your handling code here:
        AnalysisMasterForm.closeAllTempImages();
    }//GEN-LAST:event_CloseAllTempImageBTActionPerformed

    private void GraphTitleBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraphTitleBTActionPerformed
        // TODO add your handling code here:
        PlotWindowPlus pw=getCurrentPlotWindow();
        String title=CommonGuiMethods.getOneTextInput("Input Graph Title", "Graph Title", "Enter the Graph Title Here");
        pw.setGraphTitle(title);
    }//GEN-LAST:event_GraphTitleBTActionPerformed

    private void YAxisTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YAxisTitleActionPerformed
        PlotWindowPlus pw=getCurrentPlotWindow();
        String title=CommonGuiMethods.getOneTextInput("Input Y Axis Title", "Y Axis Title", pw.yLabel);
        pw.setYAxisTitle(title);
    }//GEN-LAST:event_YAxisTitleActionPerformed

    private void XAxisTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XAxisTitleActionPerformed
        PlotWindowPlus pw=getCurrentPlotWindow();
        String title=CommonGuiMethods.getOneTextInput("Input X Axis Title", "X Axis Title", pw.xLabel);
        pw.setXAxisTitle(title);
    }//GEN-LAST:event_XAxisTitleActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        IJ.runPlugIn("Copy to System", "ij.plugin.Clipboard", "scopy");
    }//GEN-LAST:event_jButton1ActionPerformed
    public boolean HighlightCurve(){
        return HighlightCurveRB.isSelected();
    }
    public int renewWindowSizeChoices(String name, ArrayList<String> svWs){
        svWs.clear();
        if(m_cCurrentPlot==null) return -1;
        LineFeatureExtracter2 cFE=m_cCurrentPlot.getFeatureExtracter();
        if(cFE==null) {
            cFE=new LineFeatureExtracter2("",m_cCurrentPlot.pdX,m_cCurrentPlot.pdY);
            m_cCurrentPlot.setFeatureExtracter(cFE);
        }
        cFE.getWindowSizes(name, svWs);
        if(svWs.isEmpty()) return -1;
        boolean bt=initializing;
        initializing=true;
        CommonGuiMethods.resetItemsStrings(this, WindowSizeCB, svWs);
        initializing=bt;
        return 1;
    }
    public int plotFeatureLine(){
        if(m_cCurrentPlot==null) return -1;
        String name=(String) FeatureOptionCB.getSelectedItem();
        String sWs=(String)WindowSizeCB.getSelectedItem();
        String color=(String) ColorOptionCB.getSelectedItem();
        Color c=CommonGuiMethods.getColorSelection(color);
        return plotFeatureLine(name,sWs,c);
    }
    public int plotFeatureLine(String name, String ws, Color c){
        LineFeatureExtracter2 cFE=m_cCurrentPlot.getFeatureExtracter();
        if(cFE==null) {
            cFE=new LineFeatureExtracter2("",m_cCurrentPlot.pdX,m_cCurrentPlot.pdY);
            m_cCurrentPlot.setFeatureExtracter(cFE);
        }
        ArrayList<double[]> line=cFE.getFeatureLine(name, ws,ShowSegmentsRB.isSelected());
        if(!validLines(line)) 
            return -1;
        Color c1=Color.BLACK;
        double[] pdX=line.get(0),pdY=line.get(1);       
        int lines=line.size()/2,iI=0,lw=1;
        int index=0;
        
        if(!ShowSegmentsRB.isSelected()){
            c1=c;
            lw=2;
        }
        
        if(lines>1){
            if(name.contentEquals("Envelope thickness"))
                c1=Color.CYAN;
            m_cCurrentPlot.addPlot(name+"-"+ws, pdX, pdY, getSelectedShapeWidth(), getSelectedPlotShape(), c1);
            iI=1;
        }
        for(int i=iI;i<lines;i++){
            pdX=line.get(i*2);
            pdY=line.get(i*2+1);
            if(name.contentEquals("Envelope thickness")) c=CommonGuiMethods.getDefaultColor(i+3);
            m_cCurrentPlot.addPlot(name+"-"+ws, pdX, pdY, getSelectedShapeWidth(), getSelectedPlotShape(), c);
        }
        
        return 1;
    }
    public static boolean validLines(ArrayList<double[]> lines){
        int i,len=lines.size();
        if(len<2) return false;
        if(len%2!=0) return false;
        int index=0;
        double[] pdX, pdY;
        while(index<len){
            pdX=lines.get(index);
            index++;
            pdY=lines.get(index);
            index++;
            if(pdX==null||pdY==null) return false;
        }
        return true;
    }
    public int removeFeatureLines(){
        if(m_cCurrentPlot==null) return -1;
        String name=(String) FeatureOptionCB.getSelectedItem();
        m_cCurrentPlot.removePlotGroup(name);
        return 1;
    }
    public static void closeAllPlotWindowPlus(){
        synchronized(cvPlotWindows){
            PlotWindowPlus pw;
            int len=cvPlotWindows.size(),index,len1;
            ArrayList<PlotWindowPlus> pws=new ArrayList();
            while(cvPlotWindows.size()>0){
                if(cvPlotWindows.isEmpty()) break;
                len1=cvPlotWindows.size(); 
                if(len1==0) break;
                pw=cvPlotWindows.get(0);
                if(pw==null){
                    cvPlotWindows.remove(0);
                }else{
                    cvPlotWindows.remove(pw);       
                    pw.close();
                }
                while(cvPlotWindows.size()>=len1){
                    try{                  
                      Thread.currentThread().sleep(100);//sleep for 100 ms                  
                    }
                    catch(InterruptedException ie){ }               
                }               
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlotHandlerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlotHandlerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlotHandlerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlotHandlerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PlotHandlerGui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalysisBT;
    private javax.swing.JRadioButton AutoYScaleRB;
    private javax.swing.JButton CloseAllBT;
    private javax.swing.JButton CloseAllTempImageBT;
    private javax.swing.JButton ClosePlotBT;
    private javax.swing.JComboBox ColorOptionCB;
    private javax.swing.JLabel CursorStatusLB;
    private javax.swing.JComboBox CurveListCB;
    private javax.swing.JScrollPane CurveStatisticsSP;
    private javax.swing.JButton DuplicateBT;
    private javax.swing.JComboBox FeatureOptionCB;
    private javax.swing.JButton GraphTitleBT;
    private javax.swing.JRadioButton HighlightCurveRB;
    private javax.swing.JTextField LeftTF;
    private javax.swing.JCheckBox MarkOutLiarsCB;
    private javax.swing.JComboBox OutlierTailOptionCB;
    private javax.swing.JTextField POutlierTF;
    private javax.swing.JTextField PValueTF;
    private javax.swing.JRadioButton PickRegionRB;
    private javax.swing.JComboBox PlotOptionCB;
    private javax.swing.JComboBox PlotShapeCB;
    private javax.swing.JTextField PlotWidthTF;
    private javax.swing.JComboBox PlotWindowsCB;
    private javax.swing.JButton RemoveCurveBT;
    private javax.swing.JButton RemoveFeatureLineBT;
    private javax.swing.JButton ResetViewBT;
    private javax.swing.JTextField RightTF;
    private javax.swing.JButton SelectCurveBT;
    private javax.swing.JButton ShowCurveStatisticsBT;
    private javax.swing.JRadioButton ShowSegmentsRB;
    private javax.swing.JLabel SumaryTitleLB;
    private javax.swing.JComboBox WindowSizeCB;
    private javax.swing.JButton XAxisTitle;
    private javax.swing.JTextField XWidthTF;
    private javax.swing.JTextField XcTF;
    private javax.swing.JTextField XfTF;
    private javax.swing.JTextField XiTF;
    private javax.swing.JButton YAxisTitle;
    private javax.swing.JTextField YWidthTF;
    private javax.swing.JTextField YcTF;
    private javax.swing.JTextField YfTF;
    private javax.swing.JTextField YiTF;
    private javax.swing.JButton ZoomInBT;
    private javax.swing.JButton ZoomOutBT;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel pOutlierTF;
    // End of variables declaration//GEN-END:variables
    void zoomIn(){
//        updateCurrentPlot();
        m_cCurrentPlot.zoomIn();
    }
    void zoomOut(){
//        updateCurrentPlot();
        m_cCurrentPlot.zoomOut();
    }
    void resetZoom(){
//        updateCurrentPlot();
        m_cCurrentPlot.resetView();        
    }
    void rescalePlot(){
//        updateCurrentPlot();
        double xi=Double.parseDouble(XiTF.getText()),xf=Double.parseDouble(XfTF.getText()),yi=Double.parseDouble(YiTF.getText()),yf=Double.parseDouble(YfTF.getText());
        m_cCurrentPlot.setLimits(xi, xf, yi, yf);
    }
    int showDeltaPlot(){
//        updateCurrentPlot();
        ArrayList<String> inputs, titles=new ArrayList(), initValues=new ArrayList();
        titles.add("delta");
        initValues.add("4");
        inputs=CommonGuiMethods.inputTexts("Input rising interval", titles, initValues);
        int nDelta=Integer.parseInt(inputs.get(0));
        if(nDelta<0) return showDeltaPlot_ExtremaBased();
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);
        int len=pdX.length-nDelta;
        double[] pdXD=new double[len],pdYD=new double[len];
        for(int i=0;i<len;i++){
            pdXD[i]=pdX[i];
            pdYD[i]=pdY[i]-pdY[i+nDelta];
        }
        PlotWindowPlus pw=new PlotWindowPlus(pdXD,pdYD,"Delta Plot of "+m_cCurrentPlot.getTitle(),"X","Y",1,2,Color.black);
        return 1;
    }
    
    int showDeltaPlot_ExtremaBased(){        
//        updateCurrentPlot();
        m_cCurrentPlot.removePlotGroup("Transition");
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);    
        
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList(),nv0=nvLx, nv1=nvLn;
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        if(nvLn.get(0)<nvLx.get(0)){
            nv0=nvLn;
            nv1=nvLx;
        }
        
        ArrayList<Double> dvX=new ArrayList(), dvY=new ArrayList(), dvDelta=new ArrayList(),dvXD=new ArrayList();
        
        int l0=nv0.size(),l1=nv1.size(),len=Math.min(l0,l1),i,left,right,position0,position1;
        double dl,dr,delta,prop=0.2;
        if(len<2) return -1;
        
        left=nv0.get(0);
        position0=nv1.get(0);
        position1=nv0.get(1);        
        dl=Math.abs(pdY[position0]-pdY[left]);
        delta=Math.abs(pdY[position1]-pdY[position0]);
        
        for(i=1;i<len-1;i++){
            right=nv1.get(i);
            dr=Math.abs(pdY[right]-pdY[position1]);
//            if(prop*delta>dl&&prop*delta>dr){
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
                dvDelta.add(pdY[position1]-pdY[position0]);
//                dvDelta.add(0.5*(pdY[right]+pdY[position1]-pdY[position0]-pdY[left]));
                dvXD.add(0.5*(pdX[position0]+pdX[position1]));
//            }
            left=position0;
            dl=delta;
            delta=dr;
            position0=position1;
            position1=right;
            
            right=nv0.get(i+1);
            dr=Math.abs(pdY[right]-pdY[position1]);
//            if(prop*delta>dl&&prop*delta>dr){
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
                dvDelta.add(pdY[position1]-pdY[position0]);
//                dvDelta.add(0.5*(pdY[right]+pdY[position1]-pdY[position0]-pdY[left]));
                dvXD.add(0.5*(pdX[position0]+pdX[position1]));
//            }
            dl=delta;
            delta=dr;
            left=position0;
            position0=position1;
            position1=right;
        }
        m_cCurrentPlot.refreshPlot();
//        m_cCurrentPlot.addPlot("Transition Amps", dvXD, dvDelta, 3, PlotWindow.CIRCLE, Color.BLUE, true);
        new PlotWindowPlus(dvXD,dvDelta,"Extrema Based Delta","X","Y",2,PlotWindow.CIRCLE,Color.black);
        return 1;
    }
    void showExtremaPlot(){
//        updateCurrentPlot();
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList(),nv0=nvLx,nv1=nvLn;
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        if(nvLn.get(0)<nvLx.get(0)){
            nv0=nvLn;
            nv1=nvLx;
        }
        int i, l0=nv0.size(),l1=nv1.size(),len=l0+l1,position;
        double[] pdXE=new double[len], pdYE=new double[len];
        len=Math.max(l0, l1);
        position=0;
        for(i=0;i<len;i++){
            if(i<l0){
                pdXE[position]=pdX[nv0.get(i)];
                pdYE[position]=pdY[nv0.get(i)];
                position++;
            }
            if(i<l1){
                pdXE[position]=pdX[nv1.get(i)];
                pdYE[position]=pdY[nv1.get(i)];
                position++;
            }
        }
        PlotWindowPlus pw=new PlotWindowPlus(pdXE,pdYE,"Extrema Plot of "+m_cCurrentPlot.getTitle(),"X","Y",1,2,Color.black);
    }
    void showLocalMaxima(){
//        updateCurrentPlot();
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList();
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        int i, len=nvLx.size();
        double[] pdXE=new double[len], pdYE=new double[len];
        for(i=0;i<len;i++){
            pdXE[i]=pdX[nvLx.get(i)];
            pdYE[i]=pdY[nvLx.get(i)];
        }
        PlotWindowPlus pw=new PlotWindowPlus(pdXE,pdYE,"Local Maxima of "+m_cCurrentPlot.getTitle(),"X","Y",1,2,Color.black);
    }
    void showLocalMinima(){
//        updateCurrentPlot();
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList();
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        int i, len=nvLn.size();
        double[] pdXE=new double[len], pdYE=new double[len];
        for(i=0;i<len;i++){
            pdXE[i]=pdX[nvLn.get(i)];
            pdYE[i]=pdY[nvLn.get(i)];
        }
        PlotWindowPlus pw=new PlotWindowPlus(pdXE,pdYE,"Local Minima of "+m_cCurrentPlot.getTitle(),"X","Y",1,2,Color.black);
    }
    void showHistogram(){
//        updateCurrentPlot();
        int index=m_cCurrentPlot.getActiveCurveIndex(),i;
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);
        Histogram hist=new Histogram();
        
        ArrayList<String> titles=new ArrayList(), inits=new ArrayList(), inputs;
        utilities.CustomDataTypes.DoubleRange yRange=CommonStatisticsMethods.getRange(pdY);
        titles.add("Min:");
        titles.add("Max:");
        titles.add("Bin Size:");
        
        inits.add(PrintAssist.ToStringScientific(yRange.getMin(), 3));
        inits.add(PrintAssist.ToStringScientific(yRange.getMax(), 3));
        inits.add(PrintAssist.ToStringScientific(yRange.getRange()/100, 3));
        
        inputs=CommonGuiMethods.inputTexts("Input Hisgtogram Parameters", titles, inits);
        
        double dMin=Double.parseDouble(inputs.get(0)),dMax=Double.parseDouble(inputs.get(1)),delta=Double.parseDouble(inputs.get(2));
        hist.update(dMin, dMax, delta);
        double y;
        for(i=0;i<pdY.length;i++){
            y=pdY[i];
            if(y<dMin||y>dMax) continue;
            hist.addData(pdY[i]);
        }
        
        int nDim=hist.getDim();
        pdX=new double[nDim];
        pdY=new double[nDim];
        for(i=0;i<nDim;i++){
            pdX[i]=hist.getPosition(i);
            pdY[i]=hist.getCounts(i);
        }
        String PlotTitle="Histogram of "+m_cCurrentPlot.getTitle();
        String XTitle="Bin Center";
        String YTitle="Counts";
        PlotWindowPlus pwt=new PlotWindowPlus(pdX,pdY,PlotTitle,XTitle,YTitle,1,PlotWindowPlus.LINE,Color.black);
    }
    int showStableTransitions(){
        
//        updateCurrentPlot();
        m_cCurrentPlot.removePlotGroup("Transition");
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);    
        
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList(),nv0=nvLx, nv1=nvLn;
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        if(nvLn.get(0)<nvLx.get(0)){
            nv0=nvLn;
            nv1=nvLx;
        }
        
        ArrayList<Double> dvX=new ArrayList(), dvY=new ArrayList(), dvDelta=new ArrayList(),dvDeltaT=new ArrayList(),dvXD=new ArrayList();
        
        int l0=nv0.size(),l1=nv1.size(),len=Math.min(l0,l1),i,left,right,position0,position1;
        ArrayList<Integer> nvPositions=new ArrayList();
        double dl,dr,delta,prop=0.5,dx,dt;
        if(len<2) return -1;
        
        position0=nv0.get(0);
        
        for(i=1;i<len-1;i++){
            position1=nv1.get(i);        
            delta=pdY[position1]-pdY[position0];
            dvDeltaT.add(delta);
            nvPositions.add(position0);
            position0=position1;
            
            position1=nv0.get(i+1);        
            delta=pdY[position1]-pdY[position0];
            dvDeltaT.add(delta);
            nvPositions.add(position0);
            position0=position1;
        }
        
        len=dvDeltaT.size();
        int ws=8,j;
        ArrayList<Integer> nvRemove=new ArrayList();
        for(i=ws;i<len-ws;i++){
            dl=0;
            for(j=i-ws;j<i;j++){
                dt=Math.abs(dvDeltaT.get(j));
                if(dt>dl) dl=dt;
            }
            dr=0;
            for(j=i+1;j<=i+ws;j++){
                dt=Math.abs(dvDeltaT.get(j));
                if(dt>dr) dr=dt;
            }
            dt=prop*Math.abs(dvDeltaT.get(i));
            if(dt>dl||dt>dr){
                position0=nvPositions.get(i);
                position1=nvPositions.get(i+1);
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
                
                dvDelta.add(dvDeltaT.get(i));
                dvXD.add(pdX[position0]);
            }else{
                nvRemove.add(i);
            }
        }
        
        len=dvX.size();
        len/=2;
        for(i=0;i<len;i++){
            double[]pdXT=new double[2];
            double[]pdYT=new double[2];
            index=2*i;
            pdXT[0]=dvX.get(index);
            pdXT[1]=dvX.get(index+1);
            pdYT[0]=dvY.get(index);
            pdYT[1]=dvY.get(index+1);
            m_cCurrentPlot.addPlot("Transition"+i, pdXT, pdYT, 2, 2, Color.red, false);
        }
        m_cCurrentPlot.refreshPlot();
//        m_cCurrentPlot.addPlot("Transition Amps", dvXD, dvDelta, 3, PlotWindow.CIRCLE, Color.BLUE, true);
        new PlotWindowPlus(dvXD,dvDelta,"Stable Transition Amplitudes","X","Y",2,PlotWindow.CIRCLE,Color.black);
        return 1;
    }
    int showStableTransitions0(){
        
//        updateCurrentPlot();
        m_cCurrentPlot.removePlotGroup("Transition");
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);    
        
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList(),nv0=nvLx, nv1=nvLn;
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        if(nvLn.get(0)<nvLx.get(0)){
            nv0=nvLn;
            nv1=nvLx;
        }
        
        ArrayList<Double> dvX=new ArrayList(), dvY=new ArrayList(), dvDelta=new ArrayList(),dvXD=new ArrayList();
        
        int l0=nv0.size(),l1=nv1.size(),len=Math.min(l0,l1),i,left,right,position0,position1;
        double dl,dr,delta,prop=0.1;
        if(len<2) return -1;
        
        left=nv0.get(0);
        position0=nv1.get(0);
        position1=nv0.get(1);        
        dl=Math.abs(pdY[position0]-pdY[left]);
        delta=Math.abs(pdY[position1]-pdY[position0]);
        
        for(i=1;i<len-1;i++){
            right=nv1.get(i);
            dr=Math.abs(pdY[right]-pdY[position1]);
            if(prop*delta>dl&&prop*delta>dr){
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(0.5*(pdY[right]+pdY[position1]-pdY[position0]-pdY[left]));
                dvXD.add(0.5*(pdX[position0]+pdX[position1]));
            }
            left=position0;
            dl=delta;
            delta=dr;
            position0=position1;
            position1=right;
            
            right=nv0.get(i+1);
            dr=Math.abs(pdY[right]-pdY[position1]);
            if(prop*delta>dl&&prop*delta>dr){
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(0.5*(pdY[right]+pdY[position1]-pdY[position0]-pdY[left]));
                dvXD.add(0.5*(pdX[position0]+pdX[position1]));
            }
            dl=delta;
            delta=dr;
            left=position0;
            position0=position1;
            position1=right;
        }
        
        len=dvX.size();
        len/=2;
        for(i=0;i<len;i++){
            double[]pdXT=new double[2];
            double[]pdYT=new double[2];
            index=2*i;
            pdXT[0]=dvX.get(index);
            pdXT[1]=dvX.get(index+1);
            pdYT[0]=dvY.get(index);
            pdYT[1]=dvY.get(index+1);
            m_cCurrentPlot.addPlot("Transition"+i, pdXT, pdYT, 2, 2, Color.red, false);
        }
        m_cCurrentPlot.refreshPlot();
//        m_cCurrentPlot.addPlot("Transition Amps", dvXD, dvDelta, 3, PlotWindow.CIRCLE, Color.BLUE, true);
        new PlotWindowPlus(dvXD,dvDelta,"Stable Transition Amplitudes","X","Y",2,PlotWindow.CIRCLE,Color.black);
        return 1;
    }
    int showStableTransitions1(){
        
//        updateCurrentPlot();
        m_cCurrentPlot.removePlotGroup("Transition");
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);            
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList(),nv0=nvLx, nv1=nvLn;
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        if(nvLn.get(0)<nvLx.get(0)){
            nv0=nvLn;
            nv1=nvLx;
        }
        
        ArrayList<Double> dvX=new ArrayList(), dvY=new ArrayList(), dvDelta=new ArrayList(),dvXD=new ArrayList(),dvIntervals=new ArrayList();
        CommonStatisticsMethods.getExtremaIntervals(pdX, pdY, dvX, dvIntervals);
        MeanSem1 ms=new MeanSem1();
//        ms=CommonStatisticsMethods.buildMeanSem1(CommonStatisticsMethods.getDoubleArray(dvIntervals), 0, dvIntervals.size()-1, 1);
        CommonStatisticsMethods.findOutliars(CommonStatisticsMethods.getDoubleArray(dvIntervals), 0.01, ms, new ArrayList<Integer>());
        double sd=ms.getSD();
        double cutoff=utilities.statistics.GaussianDistribution.getZatP(1-0.05, ms.mean, sd, 0.001*sd);
        dvX.clear();
        
        int l0=nv0.size(),l1=nv1.size(),len=Math.min(l0,l1),i,left,right,position0,position1;
        double dl,dr,delta,prop=0.5;
        if(len<2) return -1;
        
        left=nv0.get(0);
        position0=nv1.get(0);
        position1=nv0.get(1);        
        dl=Math.abs(pdY[position0]-pdY[left]);
        delta=Math.abs(pdY[position1]-pdY[position0]);
        
        for(i=1;i<len-1;i++){
            right=nv1.get(i);
            dr=Math.abs(pdY[right]-pdY[position1]);
            if(prop*delta>dl&&prop*delta>dr&&pdX[position1]-pdX[position0]>cutoff){
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(Math.abs(0.5*(pdY[right]+pdY[position1]-pdY[position0]-pdY[left])));
                dvXD.add(0.5*(pdX[position0]+pdX[position1]));
            }
            left=position0;
            dl=delta;
            delta=dr;
            position0=position1;
            position1=right;
            
            right=nv0.get(i+1);
            dr=Math.abs(pdY[right]-pdY[position1]);
            if(prop*delta>dl&&prop*delta>dr&&pdX[position1]-pdX[position0]>cutoff){
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(Math.abs(0.5*(pdY[right]+pdY[position1]-pdY[position0]-pdY[left])));
                dvXD.add(0.5*(pdX[position0]+pdX[position1]));
            }
            dl=delta;
            delta=dr;
            left=position0;
            position0=position1;
            position1=right;
        }
        
        len=dvX.size();
        len/=2;
        for(i=0;i<len;i++){
            double[]pdXT=new double[2];
            double[]pdYT=new double[2];
            index=2*i;
            pdXT[0]=dvX.get(index);
            pdXT[1]=dvX.get(index+1);
            pdYT[0]=dvY.get(index);
            pdYT[1]=dvY.get(index+1);
            m_cCurrentPlot.addPlot("Transition"+i, pdXT, pdYT, 2, 2, Color.red, false);
        }
        m_cCurrentPlot.refreshPlot();
//        m_cCurrentPlot.addPlot("Transition Amps", dvXD, dvDelta, 3, PlotWindow.CIRCLE, Color.BLUE, true);
        new PlotWindowPlus(dvXD,dvDelta,"Stable Transition Amplitudes","X","Y",2,PlotWindow.CIRCLE,Color.black);
        return 1;
    }
    
    int showExtremaIntervals(){
        
//        updateCurrentPlot();
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);    
        
        ArrayList<Double> dvX=new ArrayList(), dvIntervals=new ArrayList();
        CommonStatisticsMethods.getExtremaIntervals(pdX,pdY,dvX,dvIntervals);
        new PlotWindowPlus(dvX,dvIntervals,"Extrema Intervals","X","Intervals",1,PlotWindow.LINE,Color.black);
        return 1;
    }
    
    int showFullTransitionAmps(){
        ArrayList<String> titles=new ArrayList(), inits=new ArrayList(),imputs;
        titles.add("Maximal Interval");
        inits.add(PrintAssist.ToString(0.0009,5));
        imputs=CommonGuiMethods.inputTexts("input maximal interval", titles, inits);
        double dMaxInterval=Double.parseDouble(imputs.get(0));
        
//        updateCurrentPlot();
        m_cCurrentPlot.removePlotGroup("Transition");
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index); 
        
        double[] pdGradient=CommonStatisticsMethods.getGradient(pdX, pdY, 2,1);
        int[] pnExtremaG=CommonStatisticsMethods.getLocalExtrema(pdGradient);
        int[] pnNumPeaks=CommonStatisticsMethods.getPointNumberArray(pnExtremaG,pdX.length);
        
        int nRange=CommonGuiMethods.getOneInteger("Gradient Range", "WS", 2);
        
        ArrayList<Integer> nvSegPoints=CommonStatisticsMethods.getSegmentationPoints(pdX, pdY, nRange, 1);
        int len=nvSegPoints.size();
        double[] pdDelta=new double[len-1],pdAmp=new double[len-1];
        int i,position0,position1;
        intRange tRange;
        
        for(i=0;i<len-1;i++){
            position0=nvSegPoints.get(i);
            position1=nvSegPoints.get(i+1);
            pdDelta[i]=pdY[position1]-pdY[position0];
            tRange=CommonStatisticsMethods.getTransitionRange(pdX,pdY,position0,position1,dMaxInterval);
            pdAmp[i]=pdY[tRange.getMax()]-pdY[tRange.getMin()];
        }        
        
        ArrayList<Double> dvX=new ArrayList(), dvY=new ArrayList(), dvDelta=new ArrayList(),dvXD=new ArrayList();
       
        double dl,dr,delta,prop=0.4,dt,Amp;
        if(len<2) return -1;
        int iI,iT,iX,iXR;
        double dX;
        
        int ws=4,nNumGradientPeaks;
        DoubleRange dR=new DoubleRange();
        for(i=ws;i<len-ws-1;i++){
            position0=nvSegPoints.get(i);
            position1=nvSegPoints.get(i+1);
                           
            if(pdX[position1]-pdX[position0]<dMaxInterval) continue;
            delta=Math.abs(pdDelta[i]);
//            delta=Math.abs(pdAmp[i]);
            CommonStatisticsMethods.getRange(pdDelta, i-ws, i-1, 1, dR);
            dl=Math.max(Math.abs(dR.getMin()), Math.abs(dR.getMax()));
            CommonStatisticsMethods.getRange(pdDelta, i+1, i+ws, 1, dR);
            dr=Math.max(Math.abs(dR.getMin()), Math.abs(dR.getMax()));
            if((prop*delta>dl||prop*delta>dr)){
/*                iI=position0;
                iT=CommonStatisticsMethods.lastPositionInRange(pdX, position0, dMaxInterval);
                if(iT>position1) iT=position1;
                dX=delta;
                iX=iI;
                iXR=iT;
                if(dvDelta.size()==359){
                    iI=iI;
                }
                while(iT<position1){
                    iI++;
                    iT=CommonStatisticsMethods.lastPositionInRange(pdX, iI, dMaxInterval);
                    dt=Math.abs(pdY[iT]-pdY[iI]);
                    if(dt>dX){
                        dX=dt;
                        iX=iI;
                        iXR=iT;
                    }
                }*/
                dX=Math.abs(pdY[position1]-pdY[position0]);
                iX=position0;
                dvX.add(pdX[position0]);
                dvX.add(pdX[position1]);
                dvY.add(pdY[position0]);
                dvY.add(pdY[position1]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(dX);
                dvXD.add(pdX[iX]);
            }
        }
        
        len=dvX.size();
        len/=2;
        for(i=0;i<len;i++){
            double[]pdXT=new double[2];
            double[]pdYT=new double[2];
            index=2*i;
            pdXT[0]=dvX.get(index);
            pdXT[1]=dvX.get(index+1);
            pdYT[0]=dvY.get(index);
            pdYT[1]=dvY.get(index+1);
            m_cCurrentPlot.addPlot("Transition"+i, pdXT, pdYT, 2, 2, Color.red, false);
        }
        if(dvXD.size()==0) return -1;
        m_cCurrentPlot.refreshPlot();
//        m_cCurrentPlot.addPlot("Transition Amps", dvXD, dvDelta, 3, PlotWindow.CIRCLE, Color.BLUE, true);
        new PlotWindowPlus(dvXD,dvDelta,"Stable Transition (type3) Amplitudes","X","Y",2,PlotWindow.CIRCLE,Color.black);
        
        len=nvSegPoints.size();
        double[] pdSegX=new double[len],pdSegY=new double[len];
        int position;
        for(i=0;i<len;i++){
            position=nvSegPoints.get(i);
            pdSegX[i]=pdX[position];
            pdSegY[i]=pdY[position];
        }
        new PlotWindowPlus(pdSegX,pdSegY,"Segmentation Points","X","Y",2,PlotWindow.CIRCLE,Color.black);
        return 1;        
    }
     int showFullTransitionAmps0(){
        ArrayList<String> titles=new ArrayList(), inits=new ArrayList(),imputs;
        titles.add("Maximal Interval");
        inits.add(PrintAssist.ToString(0.0009,5));
        imputs=CommonGuiMethods.inputTexts("input maximal interval", titles, inits);
        double dMaxInterval=Double.parseDouble(imputs.get(0));
        
//        updateCurrentPlot();
        m_cCurrentPlot.removePlotGroup("Transition");
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index); 
        
        double[] pdGradient=CommonStatisticsMethods.getGradient(pdX, pdY, 2,1);
        int[] pnExtremaG=CommonStatisticsMethods.getLocalExtrema(pdGradient);
        int[] pnNumPeaks=CommonStatisticsMethods.getPointNumberArray(pnExtremaG,pdX.length);
        
        int[] ExtremaPositions=CommonStatisticsMethods.getLocalExtrema(pdY);
        int len=ExtremaPositions.length;
        double[] pdDelta=new double[len-1],pdAmp=new double[len-1];
        int i,position0,position1;
        intRange tRange;
        
        for(i=0;i<len-1;i++){
            position0=ExtremaPositions[i];
            position1=ExtremaPositions[i+1];
            pdDelta[i]=pdY[position1]-pdY[position0];
            tRange=CommonStatisticsMethods.getTransitionRange(pdX,pdY,position0,position1,dMaxInterval);
            pdAmp[i]=pdY[tRange.getMax()]-pdY[tRange.getMin()];
        }        
        
        ArrayList<Double> dvX=new ArrayList(), dvY=new ArrayList(), dvDelta=new ArrayList(),dvXD=new ArrayList();
       
        double dl,dr,delta,prop=0.5,dt,Amp;
        if(len<2) return -1;
        int iI,iT,iX,iXR;
        double dX;
        
        int ws=2,nNumGradientPeaks;
        DoubleRange dR=new DoubleRange();
        for(i=ws;i<len-ws-1;i++){
            position0=ExtremaPositions[i];
            position1=ExtremaPositions[i+1];
                           
            if(pdX[position1]-pdX[position0]<dMaxInterval) continue;
            delta=Math.abs(pdAmp[i]);
            CommonStatisticsMethods.getRange(pdAmp, i-ws, i-1, 1, dR);
            dl=Math.max(Math.abs(dR.getMin()), Math.abs(dR.getMax()));
            CommonStatisticsMethods.getRange(pdAmp, i+1, i+ws, 1, dR);
            dr=Math.max(Math.abs(dR.getMin()), Math.abs(dR.getMax()));
            if((prop*delta>dl&&prop*delta>dr)){
                iI=position0;
                iT=CommonStatisticsMethods.lastPositionInRange(pdX, position0, dMaxInterval);
                if(iT>position1) iT=position1;
                dX=delta;
                iX=iI;
                iXR=iT;
                if(dvDelta.size()==359){
                    iI=iI;
                }
                while(iT<position1){
                    iI++;
                    iT=CommonStatisticsMethods.lastPositionInRange(pdX, iI, dMaxInterval);
                    dt=Math.abs(pdY[iT]-pdY[iI]);
                    if(dt>dX){
                        dX=dt;
                        iX=iI;
                        iXR=iT;
                    }
                }
                
                nNumGradientPeaks=pnNumPeaks[iXR]-pnNumPeaks[iX];
                if(nNumGradientPeaks>1) 
                    continue;
                
                dvX.add(pdX[iX]);
                dvX.add(pdX[iXR]);
                dvY.add(pdY[iX]);
                dvY.add(pdY[iXR]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(dX);
                dvXD.add(pdX[iX]);
            }
        }
        
        len=dvX.size();
        len/=2;
        for(i=0;i<len;i++){
            double[]pdXT=new double[2];
            double[]pdYT=new double[2];
            index=2*i;
            pdXT[0]=dvX.get(index);
            pdXT[1]=dvX.get(index+1);
            pdYT[0]=dvY.get(index);
            pdYT[1]=dvY.get(index+1);
            m_cCurrentPlot.addPlot("Transition"+i, pdXT, pdYT, 2, 2, Color.red, false);
        }
        if(dvXD.size()==0) return -1;
        m_cCurrentPlot.refreshPlot();
//        m_cCurrentPlot.addPlot("Transition Amps", dvXD, dvDelta, 3, PlotWindow.CIRCLE, Color.BLUE, true);
        new PlotWindowPlus(dvXD,dvDelta,"Stable Transition (type2) Amplitudes","X","Y",1,PlotWindow.LINE,Color.black);
        return 1;        
    }
     int showFullTransitionAmps1(){
        ArrayList<String> titles=new ArrayList(), inits=new ArrayList(),imputs;
        titles.add("Maximal Interval");
        inits.add(PrintAssist.ToString(0.0006,5));
        imputs=CommonGuiMethods.inputTexts("input maximal interval", titles, inits);
        double dMaxInterval=Double.parseDouble(imputs.get(0));
        
//        updateCurrentPlot();
        m_cCurrentPlot.removePlotGroup("Transition");
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index);            
        ArrayList<Integer> nvLn=new ArrayList(), nvLx=new ArrayList(),nv0=nvLx, nv1=nvLn;
        CommonMethods.LocalExtrema(pdY, nvLn, nvLx);
        if(nvLn.get(0)<nvLx.get(0)){
            nv0=nvLn;
            nv1=nvLx;
        }
        
        ArrayList<Double> dvX=new ArrayList(), dvY=new ArrayList(), dvDelta=new ArrayList(),dvXD=new ArrayList(),dvIntervals=new ArrayList();
       
        int l0=nv0.size(),l1=nv1.size(),len=Math.min(l0,l1),i,left,right,position0,position1;
        double dl,dr,delta,prop=0.1,dt;
        if(len<2) return -1;
        int iI,iT,iX,iXR;
        double dX;
        
        left=nv0.get(0);
        position0=nv1.get(0);
        position1=nv0.get(1);        
        dl=Math.abs(pdY[position0]-pdY[left]);
        delta=Math.abs(pdY[position1]-pdY[position0]);
        
        for(i=1;i<len-1;i++){
            right=nv1.get(i);
            dr=Math.abs(pdY[right]-pdY[position1]);
            if((prop*delta>dl||prop*delta>dr)&&pdX[position1]-pdX[position0]>=dMaxInterval){
                iI=position0;
                iT=CommonStatisticsMethods.lastPositionInRange(pdX, position0, dMaxInterval);
                dX=delta;
                iX=iI;
                iXR=iT;
                while(iT<position1){
                    iI++;
                    iT=CommonStatisticsMethods.lastPositionInRange(pdX, iI, dMaxInterval);
                    dt=Math.abs(pdY[iT]-pdY[iI]);
                    if(dt>dX){
                        dX=dt;
                        iX=iI;
                        iXR=iT;
                    }
                }
                dvX.add(pdX[iX]);
                dvX.add(pdX[iXR]);
                dvY.add(pdY[iX]);
                dvY.add(pdY[iXR]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(dX);
                dvXD.add(pdX[iX]);
            }
            left=position0;
            dl=delta;
            delta=dr;
            position0=position1;
            position1=right;
            
            right=nv0.get(i+1);
            dr=Math.abs(pdY[right]-pdY[position1]);
            if((prop*delta>dl||prop*delta>dr)&&pdX[position1]-pdX[position0]>=dMaxInterval){
                iI=position0;
                iT=CommonStatisticsMethods.lastPositionInRange(pdX, position0, dMaxInterval);
                dX=delta;
                iX=iI;
                iXR=iT;
                while(iT<position1){
                    iI++;
                    iT=CommonStatisticsMethods.lastPositionInRange(pdX, iI, dMaxInterval);
                    dt=Math.abs(pdY[iT]-pdY[iI]);
                    if(dt>dX){
                        dX=dt;
                        iX=iI;
                        iXR=iT;
                    }
                }
                dvX.add(pdX[iX]);
                dvX.add(pdX[iXR]);
                dvY.add(pdY[iX]);
                dvY.add(pdY[iXR]);
//                dvDelta.add(pdY[position1]-pdY[position0]);
                dvDelta.add(dX);
                dvXD.add(pdX[iX]);
            }
            dl=delta;
            delta=dr;
            left=position0;
            position0=position1;
            position1=right;
        }
        
        len=dvX.size();
        len/=2;
        for(i=0;i<len;i++){
            double[]pdXT=new double[2];
            double[]pdYT=new double[2];
            index=2*i;
            pdXT[0]=dvX.get(index);
            pdXT[1]=dvX.get(index+1);
            pdYT[0]=dvY.get(index);
            pdYT[1]=dvY.get(index+1);
            m_cCurrentPlot.addPlot("Transition"+i, pdXT, pdYT, 2, 2, Color.red, false);
        }
        if(dvXD.size()==0) return -1;
        m_cCurrentPlot.refreshPlot();
//        m_cCurrentPlot.addPlot("Transition Amps", dvXD, dvDelta, 3, PlotWindow.CIRCLE, Color.BLUE, true);
        new PlotWindowPlus(dvXD,dvDelta,"Stable Transition (type2) Amplitudes","X","Y",2,PlotWindow.CIRCLE,Color.black);
        return 1;        
    }
     public void actionPerformed(ActionEvent ae){
         if(ae.getActionCommand().contentEquals("PlotRescaled")){
             updateScaleDisplay();
         }
     }
     public void updateScaleDisplay(){
//         updateCurrentPlot();
         double xi=m_cCurrentPlot.m_dXI,xf=m_cCurrentPlot.m_dXF,yi=m_cCurrentPlot.m_dYI,yf=m_cCurrentPlot.m_dYF,xm=0.5*(xi+xf),ym=0.5*(yi+yf);
         double xWidth=xf-xi,yWidth=yf-yi;
         XiTF.setText(m_cCurrentPlot.getXString(xi));
         XfTF.setText(m_cCurrentPlot.getXString(xf));
         XcTF.setText(m_cCurrentPlot.getXString(xm));
         XWidthTF.setText(m_cCurrentPlot.getXString(xWidth));
         YiTF.setText(m_cCurrentPlot.getYString(yi));
         YfTF.setText(m_cCurrentPlot.getYString(yf));
         YcTF.setText(m_cCurrentPlot.getYString(ym));
         YWidthTF.setText(m_cCurrentPlot.getYString(yWidth));
         AutoYScaleRB.setSelected(m_cCurrentPlot.autoYScale);
     }
     public void showGradientPlot(){
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index); 
        int ws=CommonGuiMethods.getOneInteger("Half Window Size","WS",2);
        double[] pdGradient=CommonStatisticsMethods.getGradient(pdX,pdY,ws,1);
        new PlotWindowPlus (pdX,pdGradient,"Gradient (ws="+ws+") of "+m_cCurrentPlot.getTitle(),"X","Y",1,PlotWindow.LINE,Color.BLACK);
     }
     public void show2EndGradientPlot(){
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index); 
        double[] pdGradient=CommonStatisticsMethods.get2ndGradient(pdX,pdY,1);
        new PlotWindowPlus (pdX,pdGradient,"2nd Gradient of "+m_cCurrentPlot.getTitle(),"X","Y",1,PlotWindow.LINE,Color.BLACK);
     }
     public void showRWMedianFiltering(){
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index); 
        int ws=CommonGuiMethods.getOneInteger("Half Window Size","WS",2);
        ArrayList<Integer> nvIndexes=null;
        double[] pdGradient=CommonStatisticsMethods.getRunningWindowQuantile(pdY, ws, ws, nvIndexes);
        new PlotWindowPlus (pdX,pdGradient,"median filtering (ws="+ws+") of "+m_cCurrentPlot.getTitle(),"X","Y",1,PlotWindow.LINE,Color.BLACK);
     }
     public void showLocalExtremaNormalization(){         
        int index=m_cCurrentPlot.getActiveCurveIndex();
        if(index<0) index=0;
        double[] pdX=m_cCurrentPlot.getXValues(index),pdY=m_cCurrentPlot.getYValues(index); 
        double[] pdGn=CommonStatisticsMethods.copyArray(pdY);
        CommonStatisticsMethods.normalizeByPeaks(pdGn);
        new PlotWindowPlus (pdX,pdGn,"Local Extrema Normalization of "+m_cCurrentPlot.getTitle(),"X","Y",1,PlotWindow.LINE,Color.BLACK);
     }
     public int addPlotWindow(PlotWindowPlus pw){
         if(cvPlotWindows.contains(pw)) return -1;
         cvPlotWindows.add(pw);
         PlotWindowsCB.addItem(pw);
         return 1;
     }
     public int getPlotIndex(PlotWindowPlus pw){
         synchronized(cvPlotWindows){
            int i,len=cvPlotWindows.size();
            for(i=0;i<len;i++){
                if(i>=cvPlotWindows.size()) return -1;
                if(pw==cvPlotWindows.get(i)) return i;
            }
         }
         return -1;
     }
     public int removePlotWindow(PlotWindowPlus pw){
         int index=getPlotIndex(pw);
         if(index<0) return -1;
         cvPlotWindows.remove(index);
         PlotWindowsCB.removeItem(pw);
         return 1;
     }
     public void setAsCurrentPlotWindow(PlotWindowPlus pw){
//         if(!cvPlotWindows.contains(pw)) addPlotWindow(pw);
         pw.setState(Frame.NORMAL);
         pw.toFront();
         pw.requestFocus();
         m_cCurrentPlot=pw;
         PlotWindowsCB.setSelectedItem(pw);
         pw.displayCurveList();
         updateScaleDisplay();
     }
     public JLabel getCursorLabel(){
         return CursorStatusLB;
     }
     public void setCursorStatus(String status){
         CursorStatusLB.setText(status);
     }
     public boolean isCurrent(PlotWindowPlus pw){
         return pw==m_cCurrentPlot;
     }
     void additionalInit(){
         ArrayList<String> FeatureNames=LineFeatureExtracter2.getFeatureLineNames();
         int i,len=FeatureNames.size();
         for(i=0;i<len;i++){
             FeatureOptionCB.addItem(FeatureNames.get(i));
         }
         CommonGuiMethods.addColorOptions(ColorOptionCB);
     }
     public boolean pickingXRange(){
         return PickRegionRB.isSelected();
     }
     public void unselectPickRegionRB(){
         PickRegionRB.setSelected(false);
     }
     public DoublePair getRegionPickingRange(){
         double left=Double.parseDouble(LeftTF.getText()),right=Double.parseDouble(RightTF.getText());
         return new DoublePair(left,right);
     }
     public int displayCurveList(ArrayList<String> names, int selectedIndex){
         if(names==null||CurveListCB==null) return -1;
         CommonGuiMethods.resetItemsStrings(this, CurveListCB, names);
         if(selectedIndex>=0&&selectedIndex<names.size()) CurveListCB.setSelectedIndex(selectedIndex);
         return 1;
     }
     public Color getSelectedColor(){
         return CommonGuiMethods.getColorSelection((String)ColorOptionCB.getSelectedItem());
     }
     public int showCurveStatistics(){
        if(m_cCurrentPlot==null) return -1;
        int ActiveIndex=m_cCurrentPlot.getActiveCurveIndex();
        if( ActiveIndex<0)  ActiveIndex=0;
        SumaryTitleLB.setText(m_cCurrentPlot.getTitle()+" -- "+m_cCurrentPlot.getPlotTitile(ActiveIndex));
        ArrayList<double[]> line=m_cCurrentPlot.getActiveCurve();
        double[] pdX=line.get(0),pdY=line.get(1),pdXT,pdYT;
        line.clear();
        
        MeanSem1 ms0=CommonStatisticsMethods.buildMeanSem1(pdY, 0, pdY.length-1, 1),ms1=new MeanSem1();
        ArrayList<Integer> nvOutliers=new ArrayList();
        
        double pValue=Double.parseDouble(PValueTF.getText()),pOutlier=Double.parseDouble(POutlierTF.getText());
        CommonStatisticsMethods.findOutliars(pdY, pOutlier, ms1, nvOutliers);
        
        String[][] psData0=ms0.getMeanSemAsStringArray(),psData1=ms1.getMeanSemAsStringArray(),psData=new String[3][];
        psData[0]=psData0[0];
        psData[1]=psData0[1];
        psData[2]=psData1[1];
        
        CommonGuiMethods.displayTable(CurveStatisticsSP,"Summary", psData);
        
        if(!MarkOutLiarsCB.isSelected()) return 1;
        nvOutliers=CommonStatisticsMethods.findOutliers(pdY,ms1,pValue,getOutlierTaileOption());
        ArrayList<intRange> irs=CommonStatisticsMethods.getConsecutiveIndexRanges(nvOutliers);
        
        Color c=getSelectedColor();
        intRange ir;
        int i, len=irs.size(),len1,j,j0;
        for(i=0;i<len;i++){
            ir=irs.get(i);
            len1=ir.getRange();
            if(len1==1){
                pdXT=new double[2];
                pdYT=new double[2];
                j0=ir.getMin();
                
                pdXT[0]=pdX[j0];
                pdYT[0]=pdY[j0];
                
                pdXT[1]=pdX[j0];
                pdYT[1]=pdY[j0];                
            }else{
                pdXT=new double[len1];
                pdYT=new double[len1];
                j0=ir.getMin();
                for(j=ir.getMin();j<=ir.getMax();j++){
                    pdXT[j-j0]=pdX[j];
                    pdYT[j-j0]=pdY[j];
                }
            }    
            m_cCurrentPlot.addPlot("OutlierRange"+i, pdXT, pdYT, 2, PlotWindow.CROSS,c);
        }        
        return 1;
    }
     int clearMarkedOutliers(){
         m_cCurrentPlot.removePlotGroup("OutlierRange");
         return 1;
     }
     public int getOutlierTaileOption(){
         String option=(String)OutlierTailOptionCB.getSelectedItem();
         if(option.contentEquals("Small")) return 0;
         if(option.contentEquals("Large")) return 1;
         if(option.contentEquals("Two sides")) return 2;
         return 2;
     }
     public int getSelectedPlotShape(){
         String shape=(String) PlotShapeCB.getSelectedItem();
         int nShape=nShape=PlotWindow.LINE;
         if(shape.contentEquals("LINE")) nShape=PlotWindow.LINE;
         if(shape.contentEquals("X")) nShape=PlotWindow.X;
         if(shape.contentEquals("Circle")) nShape=PlotWindow.CIRCLE;
         if(shape.contentEquals("Cross")) nShape=PlotWindow.CROSS;
         if(shape.contentEquals("Box")) nShape=PlotWindow.BOX;
         if(shape.contentEquals("Triangle")) nShape=PlotWindow.TRIANGLE;
         return nShape;
     }
     public int getSelectedShapeWidth(){
         return Integer.parseInt(PlotWidthTF.getText());
     }
     public static PlotWindowPlus getCurrentPlotWindow(){
         return m_cCurrentPlot;
     }
}
