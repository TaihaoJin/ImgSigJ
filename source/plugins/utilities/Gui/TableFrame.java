/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TableFrame.java
 *
 * Created on Nov 21, 2011, 11:15:59 AM
 */

package utilities.Gui;
import javax.swing.JTable;
import javax.swing.JViewport;
import utilities.CommonGuiMethods;

/**
 *
 * @author Taihao
 */
public class TableFrame extends javax.swing.JFrame {

    /** Creates new form TableFrame */
    String[] ColumnHead;
    String[][] psData;
    JTable m_cTable;
    public TableFrame() {
        initComponents();
        setVisible(true);
        CommonGuiMethods.makeClipboardCopiable(this);
    }
    public TableFrame(String title,String[] ColumnHead, String[][] psData, int rowI, int rowF){
        this();
        update(title, ColumnHead,psData,rowI,rowF);
    }
    public void update(String title,String[] ColumnHead, String[][] psData, int rowI, int rowF){
        setTitle(title);
        this.psData=psData;
        this.ColumnHead=ColumnHead;

        m_cTable=CommonGuiMethods.buildCommonTable(ColumnHead, psData, rowI, rowF);
        JViewport viewPort=new JViewport();
        viewPort.setView(m_cTable);
        MainTableSP.setViewport(viewPort);
        RowSelectionRB.setSelected(false);
        CellSelectionRB.setSelected(false);
        ColumnSelectionRB.setSelected(true);
        if(ColumnSelectionRB.isSelected()) m_cTable.setRowSelectionAllowed(true);
        RowSelectionRB.setSelected(false);
        m_cTable.setRowSelectionAllowed(false);
        CellSelectionRB.setSelected(false);
        m_cTable.setCellSelectionEnabled(false);
    }
    JTable getTable(){
        return m_cTable;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTableSP = new javax.swing.JScrollPane();
        SaveTextBT = new javax.swing.JButton();
        ColumnSelectionRB = new javax.swing.JRadioButton();
        RowSelectionRB = new javax.swing.JRadioButton();
        CellSelectionRB = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        SaveTextBT.setText("save text");
        SaveTextBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveTextBTActionPerformed(evt);
            }
        });

        ColumnSelectionRB.setText("columns");
        ColumnSelectionRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColumnSelectionRBActionPerformed(evt);
            }
        });

        RowSelectionRB.setText("rows");
        RowSelectionRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RowSelectionRBActionPerformed(evt);
            }
        });

        CellSelectionRB.setText("cells");
        CellSelectionRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CellSelectionRBActionPerformed(evt);
            }
        });

        jLabel1.setText("Selection by");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTableSP, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(SaveTextBT)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ColumnSelectionRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RowSelectionRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CellSelectionRB)
                .addGap(145, 145, 145))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainTableSP, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveTextBT)
                    .addComponent(jLabel1)
                    .addComponent(ColumnSelectionRB)
                    .addComponent(RowSelectionRB)
                    .addComponent(CellSelectionRB)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SaveTextBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveTextBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveTextBTActionPerformed

    private void ColumnSelectionRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColumnSelectionRBActionPerformed
        // TODO add your handling code here:
        if(ColumnSelectionRB.isSelected()) {
            m_cTable.setColumnSelectionAllowed(true);
            RowSelectionRB.setSelected(false);
            m_cTable.setRowSelectionAllowed(false);
            CellSelectionRB.setSelected(false);
            m_cTable.setCellSelectionEnabled(false);
        }
    }//GEN-LAST:event_ColumnSelectionRBActionPerformed

    private void RowSelectionRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RowSelectionRBActionPerformed
        // TODO add your handling code here:
        if(RowSelectionRB.isSelected()) {
            m_cTable.setRowSelectionAllowed(true);
            m_cTable.setCellSelectionEnabled(false);
            m_cTable.setColumnSelectionAllowed(false);;
        }
        RowSelectionRB.setSelected(false);
        CellSelectionRB.setSelected(false);
    }//GEN-LAST:event_RowSelectionRBActionPerformed

    private void CellSelectionRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CellSelectionRBActionPerformed
        // TODO add your handling code here:
        if(CellSelectionRB.isSelected()) {
            m_cTable.setRowSelectionAllowed(true);
            RowSelectionRB.setSelected(false);
            CellSelectionRB.setSelected(false);
        }
    }//GEN-LAST:event_CellSelectionRBActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton CellSelectionRB;
    private javax.swing.JRadioButton ColumnSelectionRB;
    private javax.swing.JScrollPane MainTableSP;
    private javax.swing.JRadioButton RowSelectionRB;
    private javax.swing.JButton SaveTextBT;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public String[] getColumnHeads(){
        return ColumnHead;
    }
    public String[][] getTableTata(){
        return psData;
    }

}
