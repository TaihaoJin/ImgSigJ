/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FittingResultAnalyzerForm.java
 *
 * Created on Jun 24, 2011, 2:53:53 PM
 */

package utilities.Non_LinearFitting;
import utilities.FittingResults_Analyzer;
import ij.ImagePlus;
import utilities.CommonMethods;
import ij.IJ;
import ij.gui.ImageWindow;
import java.awt.event.*;
import java.util.EventObject;
import utilities.CommonGuiMethods;
import java.util.ArrayList;
import ij.WindowManager;
import utilities.io.PrintAssist;
import ImageAnalysis.AnnotatedImagePlus;
import ij.gui.Roi;
import ij.gui.PointRoi;
import ij.gui.OvalRoi;
import java.awt.Point;
import javax.swing.JFrame;
import java.awt.Color;
import javax.swing.*;
import java.awt.*;
import java.util.StringTokenizer;

/**
 *
 * @author Taihao
 */
public class FittingResultAnalyzerForm extends javax.swing.JFrame implements MouseListener, MouseMotionListener, AdjustmentListener, ItemListener,ActionListener{
    AnnotatedImagePlus impl_Fitting;
    FittingResults_Analyzer m_cFittingResults;
    Point m_cCursorImageCoordinates,m_cCursorOnScreenLocation;
    ArrayList<FittingResultsNode> m_dvFittingResultNodes;
    int nCurrentSlice;
    ArrayList<AnnotatedImagePlus> m_cvImpl_FittingComponents;
    WindowAdapter m_cWindowAdaper;
    ImagePlus impl_Source;//the image that get the mouse cursor
    ArrayList<ImagePlus> cvListeningImages;

    class WindowWindowAdapter extends WindowAdapter{
        public void windowClosed(WindowEvent we){
//            removeImagePropertyNode();
        }
    }

    /** Creates new form FittingResultAnalyzerForm */
    public FittingResultAnalyzerForm(FittingResults_Analyzer cFittingResults) {
        initComponents();
        m_cvImpl_FittingComponents=new ArrayList();
        setFittingResults(cFittingResults);
        completeForm();
    }
    public void setFittingResults(FittingResults_Analyzer cResults){
        m_cFittingResults=cResults;
        m_dvFittingResultNodes=cResults.getFittingResultNodes();        
    }

    void completeForm(){
        setTitle("Fitting results analyzer");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        impl_Fitting=m_cFittingResults.getResultImage();
        cvListeningImages=new ArrayList();
        cvListeningImages.add(impl_Fitting);
        ImageWindow win=impl_Fitting.getWindow();
        if(win==null){
            impl_Fitting.show();
            win=impl_Fitting.getWindow();
        }
        addMouseListener(this);
// 	addMouseMotionListener(this);
 	win.getCanvas().addMouseMotionListener(this);
        win.getCanvas().addMouseListener(this);
//        showFittingResultsTable();
        WindowManager.addWindow(this);
        nCurrentSlice=impl_Fitting.getSlice();
        ShowFittingResultsBT.addActionListener(this);
        ShowFittingResultsBT.setActionCommand("DisplayFittingResults");
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ShowCorrespondingPointRB = new javax.swing.JRadioButton();
        ShowFittingComponentsRB = new javax.swing.JRadioButton();
        ShowFittingResultsBT = new javax.swing.JButton();
        AdjustFittingRB = new javax.swing.JRadioButton();
        PointTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        UpdatePositionRB = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ShowCorrespondingPointRB.setText("Coresponding Points");
        ShowCorrespondingPointRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCorrespondingPointRBActionPerformed(evt);
            }
        });

        ShowFittingComponentsRB.setText("Show Fitting Components");

        ShowFittingResultsBT.setText("Show Fitting Results");

        AdjustFittingRB.setText("Adjust Fitting");

        PointTF.setText("125,125");
        PointTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointTFActionPerformed(evt);
            }
        });

        jLabel1.setText("go to slice containing");

        UpdatePositionRB.setText("update position");
        UpdatePositionRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePositionRBActionPerformed(evt);
            }
        });

        jButton1.setText("Listen To Open Images");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShowCorrespondingPointRB)
                    .addComponent(AdjustFittingRB)
                    .addComponent(ShowFittingComponentsRB))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShowFittingResultsBT)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PointTF, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(UpdatePositionRB))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShowCorrespondingPointRB)
                    .addComponent(ShowFittingResultsBT))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ShowFittingComponentsRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AdjustFittingRB))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UpdatePositionRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(PointTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowCorrespondingPointRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCorrespondingPointRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShowCorrespondingPointRBActionPerformed

    private void PointTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointTFActionPerformed
        String st=PointTF.getText();
        StringTokenizer stk=new StringTokenizer(st," ,");
        int x=Integer.parseInt(stk.nextToken());
        int y=Integer.parseInt(stk.nextToken());
        m_cFittingResults.setToSliceContainPoint(x, y);
    }//GEN-LAST:event_PointTFActionPerformed

    private void UpdatePositionRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePositionRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdatePositionRBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ArrayList<ImagePlus> Images=CommonMethods.getAllOpenImages();
        ImagePlus impl;
        if(cvListeningImages==null) cvListeningImages=new ArrayList();
        int len=Images.size(),i;
        for(i=0;i<len;i++){
            impl=Images.get(i);
            if(CommonMethods.containsImage(cvListeningImages, impl)) continue;
            impl.getWindow().getCanvas().addMouseListener(this);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new FittingResultAnalyzerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AdjustFittingRB;
    private javax.swing.JTextField PointTF;
    private javax.swing.JRadioButton ShowCorrespondingPointRB;
    private javax.swing.JRadioButton ShowFittingComponentsRB;
    private javax.swing.JButton ShowFittingResultsBT;
    private javax.swing.JRadioButton UpdatePositionRB;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public void mouseClicked(MouseEvent e){
        impl_Source=getSourceImage(e);
        recordLocation(e);
        if(impl_Fitting.getWindow().getCanvas().equals(e.getSource())){
            if(sliceChanged()) updateSlice();
            if(ShowFittingComponentsRB.isSelected()){
                showFittingComponents();
            }
        }
        ImagePlus impl=getSourceImage(e);
        if(impl.getType()==AnnotatedImagePlus.Annotated){
            AnnotatedImagePlus impla=(AnnotatedImagePlus) impl;

            if(impla.getDescription().equalsIgnoreCase("FittingComponents")){
                if(ShowCorrespondingPointRB.isSelected())highlightCorrespondingDataPositions(impla,m_cCursorImageCoordinates,Color.green);
                if(AdjustFittingRB.isSelected())m_cFittingResults.adjustFitting(impla,m_cCursorImageCoordinates,impla.getCurrentSlice());
            }
        }
        if(UpdatePositionRB.isSelected()){
            PointTF.setText(m_cCursorImageCoordinates.x+","+m_cCursorImageCoordinates.y);
        }
    }
    public static void highlightPoints(ImagePlus impl, ArrayList<Point> points){
        int len=points.size();
        for(int i=0;i<len;i++){
            highlightPoint(impl,points.get(i));
        }
    }
    public static void highlightPoint(ImagePlus impl, Point p){
        PointRoi pRoi=new PointRoi(p.x,p.y);
        pRoi.setImage(impl);
        pRoi.setColor(Color.green);
        pRoi.draw(impl.getCanvas().getGraphics());
    }
    public void mousePressed(MouseEvent e){}

    /**
     * Invoked when a mouse button has been released on a component.
     */
    public void mouseReleased(MouseEvent e){}

    /**
     * Invoked when the mouse enters a component.
     */
    public void mouseEntered(MouseEvent e){}

    /**
     * Invoked when the mouse exits a component.
     */
    public void mouseExited(MouseEvent e){}
    public void mouseDragged(MouseEvent e){}

    /**
     * Invoked when the mouse cursor has been moved onto a component
     * but no buttons have been pushed.
     */
    public void mouseMoved(MouseEvent e){
        impl_Source=getSourceImage(e);
        recordLocation(e);
        String stemp=impl_Source.getTitle()+getCursorLocationAsString();
        ImagePlus impl=getSourceImage(e);
        if(impl.getType()==AnnotatedImagePlus.Annotated){
            AnnotatedImagePlus impla=(AnnotatedImagePlus) impl;
            if(impla.getDescription().equalsIgnoreCase("FittingComponents")){
                int slice=impla.getCurrentSlice();
                stemp=m_cFittingResults.getFittingResultsAsString(impla,m_cCursorImageCoordinates, slice);
            }
        }
        IJ.showStatus(stemp);
    }
    boolean sliceChanged(){
        int slice=impl_Fitting.getSlice();
        return (slice!=nCurrentSlice);
    }
    void updateSlice(){
        nCurrentSlice=impl_Fitting.getSlice();
    }
    void recordLocation(MouseEvent me){
        impl_Source=getSourceImage(me);
        String stemp;
        m_cCursorOnScreenLocation=me.getLocationOnScreen();
        m_cCursorImageCoordinates=CommonGuiMethods.getCursorLocation_ImageCoordinates(impl_Source);
    }
    String getCursorLocationAsString(){
        return new String("Cursor: ("+m_cCursorOnScreenLocation.x+","+m_cCursorOnScreenLocation.y+"). Image Coordinates: "+m_cCursorImageCoordinates.x+","+m_cCursorImageCoordinates.y+")");
    }
    public void itemStateChanged(ItemEvent e){
    }
    public void actionPerformed(ActionEvent e){
        if(e.getActionCommand().equalsIgnoreCase("DisplayFittingResults")){
            showFittingResultsTable();
        }
    }
    void showFittingResultsTable(){
        JFrame jfr=new JFrame();
        int slice=impl_Fitting.getSlice();
        jfr.setSize(200,400);
        jfr.setLayout(new BorderLayout());
        jfr.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        FittingResultsNode aNode=m_dvFittingResultNodes.get(slice-1);
        ArrayList<String[]> stringArray=aNode.getFittingResultsAsStringArray();
        int rows=stringArray.size(),i,j;
        String[] columnHeads=stringArray.get(0),sta;
        int cols=columnHeads.length;
        String[][] psData=new String[rows-1][cols];
        for(i=1;i<rows;i++){
            sta=stringArray.get(i);
            for(j=0;j<cols;j++){
                psData[i-1][j]=sta[j];
            }
        }
        JTable table=new JTable(psData,columnHeads);
        CommonGuiMethods.setTableCellAlignmentH(table, JLabel.RIGHT);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        JScrollPane jsp=new JScrollPane(table);
        jsp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jsp.setSize(600, 1000);
        jfr.add(jsp);
        jfr.setTitle("Fitting results ("+PrintAssist.ToString_Order(slice)+") "+(cols-1)+" Models");
        jfr.setVisible(true);
    }
    void showFittingComponents(){
        ImagePlus impl=m_cFittingResults.showFittingComponents(m_cCursorImageCoordinates, impl_Fitting.getCurrentSlice());
        if(impl!=null) {
            impl.show();
//            m_cvImpl_FittingComponents.add((AnnotatedImagePlus)impl);
            ImageWindow win=impl.getWindow();
            if(win==null){
                impl_Fitting.show();
                win=impl_Fitting.getWindow();
            }
            win.getCanvas().addMouseMotionListener(this);
            win.getCanvas().addMouseListener(this);
        }
    }
    public synchronized void adjustmentValueChanged(AdjustmentEvent e) {
        if(e.getSource().equals(impl_Fitting.getWidth())){
            e=e;
        }
    }
    public ImagePlus getSourceImage(EventObject eo){
        ArrayList<ImagePlus> images=CommonMethods.getAllOpenImages();
        ImagePlus impl;
        int len=images.size();
        for(int i=0;i<len;i++){
            impl=images.get(i);
            if(impl.getWindow().getCanvas().equals(eo.getSource())) return impl;
        }
        return null;
    }
    public static void highlightCorrespondingDataPositions(AnnotatedImagePlus impl, Point pt, Color c){
        int slice=impl.getCurrentSlice();
        ArrayList<Point> points=FittingResults_Analyzer.getCorespondingDataPositions(impl, pt, slice);
        points.add(pt);
        CommonGuiMethods.highlightPoints(impl,points,c);
    }
}
